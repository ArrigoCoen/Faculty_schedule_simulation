mat_solicitudes_restantes <- mat_solicitudes_real
mat_esqueleto_restante <- mat_esqueleto
for(r in 1:dim(asig_fijas)[1]){
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
#Se eliminan las solicitudes
(ind_prof <- which(mat_solicitudes_restantes[,1] == prof))
(ind_hora <- which(mat_solicitudes_restantes[,5] == hora))
(ind_materia <- which(mat_solicitudes_restantes[,3] == materia))
(elim_hora_prof <- intersect(ind_prof,ind_hora))
(elim_materia_prof <- intersect(ind_prof,ind_materia))
(ind_elim <- union(elim_hora_prof,elim_materia_prof))
if(length(ind_elim) > 0){
mat_solicitudes_restantes <- mat_solicitudes_restantes[-ind_elim,]
}
#Se eliminan los grupos en el esqueleto
(h_hora <- which(7:21 == as.numeric(hora)))
(j_materia <- arroja_num_materia(materia))
mat_esqueleto_restante[h_hora,j_materia] <- mat_esqueleto_restante[h_hora,
j_materia] - 1
}#Fin for(r)
list_asignacion_final <- AG_asignaciones(mat_esqueleto_restante,
mat_solicitudes_restantes,param)
list_asignacion_final[[1]] <- rbind(list_asignacion_final[[1]],asig_fijas)
}#Fin else
return(list_asignacion_final)
}
# gen_asignacion_completa -------------------------------------------------
#' Title gen_asignacion_completa: Función que genera la asignación
#' completa de materias, profesores, horas. Utiliza el Algoritmo Genético.
#' Tiene la opción de leer un archivo de excel con grupos predefinidos.
#'
#' @param con_xlsx_1_sin_xlsx_0: Variable binaria que vale 1 si se debe
#' de leer el archivo xlsx y 0 si no.
#' @param param: Lista con los diferentes parámetros que se utilizan en las
#' funciones que se mandan llamar.
#' @param param_sim: Lista con los diferentes parámetros que se utilizan en las
#' funciones que se encargan de la simulación.
#'
#' @example param <- list(nombre_hrs = c("7-8","8-9"),nombre_sem = c("2015-1",
#' "2015-2"),Semestres = c(20192,20201),Horas = c(7,8,9,10),q1 = 80, q2 = 90,
#' m_grande_total)
#' @example param_sim <- list(vec_sem_sig = c(20191,20192,20201),k_sem_ant = 5,
#' materia = "Estadística III", num_sim = 10, m_filtrada = matrix(0),
#' sub_m_filtrada = matrix(0,ncol = length(param$nom_cols_MG)))
#'
#' @return list_asignacion_final: Lista de 12 elementos:
#' 1) mat_asignacion_final: Matriz de 3 columnas (Materia,Profesor,
#' Horario). Contiene la asignación final encontrada con el algoritmo
#' genético.
#' 2) calif_mejor_elem: Vector con calificaciones de los mejores elementos
#' por generación.
#' 3) mat_calif_generaciones: Matriz con calificaciones de todos los
#' elementos de todas las generaciones.
#' 4) matrices_calif_x_generacion: Lista de tamaño num_generaciones+1
#' con las matrices de calificaciones ordenadas por generación.
#' 5) mejores_asig: Lista de tamaño num_generaciones+1 con la información
#' de los mejores hijos de cada generación.
#' 6) mat_num_genes: Matriz con el número de genes de todos los elementos
#' por generación.
#' 7) mat_esqueleto: Matriz con el esqueleto utilizado para generar la
#' asignación.
#' 8) mat_solicitudes_real: Matriz con las solicitudes simuladas de los
#' profesores.
#' 9) param: Lista con los diferentes parámetros que se utilizan en las
#' funciones que se mandan llamar.
#' 10) vec_info_AG: Vector con información del AG y sus resultados.
#' 11) esq_asig_final: Esqueleto de la asignación final.
#' 12) info_gpos_sin_asig: Matriz con las columnas: mat_esq (gpos. por
#' materia en mat_esqueleto), esq_asig_fin (gpos. x materia en
#' esq_asig_final), gpos_sin_asig (gpos. sin asignación x materia),
#' dif_rel (diferencia relativa x materia).
#'
#' @examples
#' list_asignacion_final <- gen_asignacion_completa(con_xlsx_1_sin_xlsx_0,
#'                                                  param,param_sim)
#'
gen_asignacion_completa <- function(con_xlsx_1_sin_xlsx_0,param,param_sim){
ptm <- proc.time()# Start the clock!
#' 5) Simulación de esqueletos
n_rep <- 10
set.seed(42)
lista_esq_D_prima <- metodo_B(n_rep,param,param_sim)
mat_esqueleto <- lista_esq_D_prima[[1]]
# View(mat_esqueleto)
#' 4b) Simulación de solicitudes de profesores (pseudo-real)
set.seed(42)
mat_solicitudes_real <- gen_solicitudes_real(mat_esqueleto,param)#8.3 seg
# View(mat_solicitudes_real)
#' 10) AG aplicado a asignaciones: Aquí ya va a salir una buena asignación
set.seed(42)
list_asignacion_final <- AG_asignaciones_con_xlsx(mat_esqueleto,
mat_solicitudes_real,
con_xlsx_1_sin_xlsx_0,
param)
cat("\nLa función gen_asignacion_completa tardó: ",
(proc.time()-ptm_generaciones)[3]/60," minutos. \n")
return(list_asignacion_final)
}
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
#' Se cargan los paquetes
library(zoo)
library(rvest)
library(purrr)
library(forecast)
library(xml2)
library(stringr)
# library(xlsx)
library(writexl)
library(RColorBrewer)
library(astsa, quietly=TRUE, warn.conflicts=FALSE)
library(ggplot2)
library(knitr)
library(printr)
library(plyr)
library(lubridate)
library(gridExtra)
library(reshape2)
library(TTR)
library(randomcoloR)
library(manipulate)
library(fitdistrplus)
library(stringdist)
library(plotGMM)
library(mixtools)
library(ggplot2)
library(randtests)
library(stats)
library(seastests)
library(tseries)
library(lmtest)
# library(het.test)
library(magrittr)
library(dplyr)
library(resample)
library(ggpubr)
library(xtable)
library(readxl)
# param -------------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones.
param <- list()
param$sem_ini = 20081##Inicio de información real
param$sem_fin = 20201##Fin de información real
param$sem_sig = 20202##Semestre de simulación
#Vector con los semestres del 2008-1 al 2020-2:
param$sem_totales = (20081:20202)[(20081:20202)%% 10>0 &(20081:20202)%% 10<3]
#Vector con los semestres de "sem_ini" a "sem_fin":
param$Semestres = (param$sem_ini:param$sem_fin)[(param$sem_ini:param$sem_fin)
%% 10>0
&(param$sem_ini:param$sem_fin)
%% 10<3]
param$nombre_sem = as.character(param$Semestres)#Semestres en tipo caracter
#Número de semestres anteriores al semestre de simulación:
param$n_semestres_anteriores = length(param$Semestres)
#Horas en las que se imparten las clases:
param$Horas = c(7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)
param$nombre_hrs = c("7-8","8-9","9-10","10-11","11-12",
"12-13","13-14","14-15","15-16",
"16-17","17-18","18-19","19-20",
"20-21","21-22")
#' Valores de los cuantiles de los intervalos de confianza para simular el
#' número de alumnos:
param$q1 = 85
param$q2 = 80
#' Nombres de las columnas para las matrices "m_grande":
param$nom_cols_m14 = c("Materia","Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia","url")
param$nom_cols_MG = c("Materia","Profesor","Horario","horario_num",
"Lugares","Alumnos","Salon","Grupo","Carrera",
"Plan","Semestre","Cambios","Turno",
"Semestre_de_materia","url","Act2000","Act2006",
"Act2015","CdC1994","CdC2013","Mat1983","MAp2017",
"NomMat_Act2000","NomMat_Act2006","NomMat_Act2015",
"NomMat_CdC1994","NomMat_CdC2013","NomMat_Mat1983",
"NomMat_MAp2017","URL_Act2000","URL_Act2006",
"URL_Act2015","URL_CdC1994","URL_CdC2013",
"URL_Mat1983","URL_MAp2017","Num_materia")
param$m_grande_total = matrix(0,ncol = length(param$nom_cols_MG))
param$m_grande_2015 = matrix(0,ncol = length(param$nom_cols_MG))
param$vec_nom_materias_total = 0
param$mat_nom_prof_total = 0
param$num_max_asig = 2 #Número máximo de materias asignadas por profesor
param$cota_TC = 1000 #Cota para ciclo
param$cota_asig = 6000 #Cota para ciclo
param$tam_poblacion = 25 #Tamaño de la población en el Algoritmo Genético (AG)
param$num_generaciones = 25 #Número de generaciones en el AG
param$prob_mutacion = 1/(6+18) #Probabilidad de mutación en el AG
param$n_cols_mat_calif = 2000 #Cota para el número de columnas
param$elige_TC = 0.7 #Probabilidad de elegir un profesor de tiempo completo en el AG
param$mat_info_AG = data.frame(Num_generaciones = 0,
Tam_pob = 0,
Tiempo = 0,
Mejor_calif = 0,
Num_genes_asig_fin = 0,
Calif_asig_fin = 0,
Prom_genes_gen1 = 0,
Prom_genes_generaciones = 0)
#' Se cargan los documentos para definir algunos parámetros
#Matriz con info real de "sem_ini" a "sem_fin":
load(file = paste0("m_grande_total_",param$sem_ini,"_",param$sem_fin,".RData"))
param$m_grande_total = m_grande_total
#Vector con el nombre de las materias utilizadas:
load(file = "vec_nom_materias_total.RData")
param$vec_nom_materias_total = vec_nom_materias_total
#Matriz con el nombre de los profesores:
load(file = "mat_nom_prof_total.RData")
param$mat_nom_prof_total = mat_nom_prof_total
#Matriz con info real de 2015-1 a "sem_fin":
load("Matrices m_grande_total/m_grande_total_20151_20201.RData")
param$m_grande_2015 = m_grande_total
#Matriz que guarda la información de las pruebas del AG:
load("mat_info_AG.RData")
param$mat_info_AG = mat_info_AG
# param -------------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones.
param <- list()
param$sem_ini = 20081##Inicio de información real
param$sem_fin = 20201##Fin de información real
param$sem_sig = 20202##Semestre de simulación
#Vector con los semestres del 2008-1 al 2020-2:
param$sem_totales = (20081:20202)[(20081:20202)%% 10>0 &(20081:20202)%% 10<3]
#Vector con los semestres de "sem_ini" a "sem_fin":
param$Semestres = (param$sem_ini:param$sem_fin)[(param$sem_ini:param$sem_fin)
%% 10>0
&(param$sem_ini:param$sem_fin)
%% 10<3]
param$nombre_sem = as.character(param$Semestres)#Semestres en tipo caracter
#Número de semestres anteriores al semestre de simulación:
param$n_semestres_anteriores = length(param$Semestres)
#Horas en las que se imparten las clases:
param$Horas = c(7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)
param$nombre_hrs = c("7-8","8-9","9-10","10-11","11-12",
"12-13","13-14","14-15","15-16",
"16-17","17-18","18-19","19-20",
"20-21","21-22")
#' Valores de los cuantiles de los intervalos de confianza para simular el
#' número de alumnos:
param$q1 = 85
param$q2 = 80
#' Nombres de las columnas para las matrices "m_grande":
param$nom_cols_m14 = c("Materia","Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia","url")
param$nom_cols_MG = c("Materia","Profesor","Horario","horario_num",
"Lugares","Alumnos","Salon","Grupo","Carrera",
"Plan","Semestre","Cambios","Turno",
"Semestre_de_materia","url","Act2000","Act2006",
"Act2015","CdC1994","CdC2013","Mat1983","MAp2017",
"NomMat_Act2000","NomMat_Act2006","NomMat_Act2015",
"NomMat_CdC1994","NomMat_CdC2013","NomMat_Mat1983",
"NomMat_MAp2017","URL_Act2000","URL_Act2006",
"URL_Act2015","URL_CdC1994","URL_CdC2013",
"URL_Mat1983","URL_MAp2017","Num_materia")
param$m_grande_total = matrix(0,ncol = length(param$nom_cols_MG))
param$m_grande_2015 = matrix(0,ncol = length(param$nom_cols_MG))
param$vec_nom_materias_total = 0
param$mat_nom_prof_total = 0
param$num_max_asig = 2 #Número máximo de materias asignadas por profesor
param$cota_TC = 1000 #Cota para ciclo
param$cota_asig = 6000 #Cota para ciclo
param$tam_poblacion = 25 #Tamaño de la población en el Algoritmo Genético (AG)
param$num_generaciones = 25 #Número de generaciones en el AG
param$prob_mutacion = 1/(6+18) #Probabilidad de mutación en el AG
param$n_cols_mat_calif = 2000 #Cota para el número de columnas
param$elige_TC = 0.7 #Probabilidad de elegir un profesor de tiempo completo en el AG
param$mat_info_AG = data.frame(Num_generaciones = 0,
Tam_pob = 0,
Tiempo = 0,
Mejor_calif = 0,
Num_genes_asig_fin = 0,
Calif_asig_fin = 0,
Prom_genes_gen1 = 0,
Prom_genes_generaciones = 0)
#' Se cargan los documentos para definir algunos parámetros
#Matriz con info real de "sem_ini" a "sem_fin":
load(file = paste0("m_grande_total_",param$sem_ini,"_",param$sem_fin,".RData"))
param$m_grande_total = m_grande_total
#Vector con el nombre de las materias utilizadas:
load(file = "vec_nom_materias_total.RData")
param$vec_nom_materias_total = vec_nom_materias_total
#Matriz con el nombre de los profesores:
load(file = "mat_nom_prof_total.RData")
param$mat_nom_prof_total = mat_nom_prof_total
#Matriz con info real de 2015-1 a "sem_fin":
load("Matrices m_grande_total/m_grande_total_20151_20201.RData")
param$m_grande_2015 = m_grande_total
#Matriz que guarda la información de las pruebas del AG:
load("mat_info_AG.RData")
param$mat_info_AG = mat_info_AG
# param -------------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones.
param <- list()
param$sem_ini = 20081##Inicio de información real
param$sem_fin = 20201##Fin de información real
param$sem_sig = 20202##Semestre de simulación
#Vector con los semestres del 2008-1 al 2020-2:
param$sem_totales = (20081:20202)[(20081:20202)%% 10>0 &(20081:20202)%% 10<3]
#Vector con los semestres de "sem_ini" a "sem_fin":
param$Semestres = (param$sem_ini:param$sem_fin)[(param$sem_ini:param$sem_fin)
%% 10>0
&(param$sem_ini:param$sem_fin)
%% 10<3]
param$nombre_sem = as.character(param$Semestres)#Semestres en tipo caracter
#Número de semestres anteriores al semestre de simulación:
param$n_semestres_anteriores = length(param$Semestres)
#Horas en las que se imparten las clases:
param$Horas = c(7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)
param$nombre_hrs = c("7-8","8-9","9-10","10-11","11-12",
"12-13","13-14","14-15","15-16",
"16-17","17-18","18-19","19-20",
"20-21","21-22")
#' Valores de los cuantiles de los intervalos de confianza para simular el
#' número de alumnos:
param$q1 = 85
param$q2 = 80
#' Nombres de las columnas para las matrices "m_grande":
param$nom_cols_m14 = c("Materia","Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia","url")
param$nom_cols_MG = c("Materia","Profesor","Horario","horario_num",
"Lugares","Alumnos","Salon","Grupo","Carrera",
"Plan","Semestre","Cambios","Turno",
"Semestre_de_materia","url","Act2000","Act2006",
"Act2015","CdC1994","CdC2013","Mat1983","MAp2017",
"NomMat_Act2000","NomMat_Act2006","NomMat_Act2015",
"NomMat_CdC1994","NomMat_CdC2013","NomMat_Mat1983",
"NomMat_MAp2017","URL_Act2000","URL_Act2006",
"URL_Act2015","URL_CdC1994","URL_CdC2013",
"URL_Mat1983","URL_MAp2017","Num_materia")
param$m_grande_total = matrix(0,ncol = length(param$nom_cols_MG))
param$m_grande_2015 = matrix(0,ncol = length(param$nom_cols_MG))
param$vec_nom_materias_total = 0
param$mat_nom_prof_total = 0
param$num_max_asig = 2 #Número máximo de materias asignadas por profesor
param$cota_TC = 1000 #Cota para ciclo
param$cota_asig = 6000 #Cota para ciclo
param$tam_poblacion = 25 #Tamaño de la población en el Algoritmo Genético (AG)
param$num_generaciones = 25 #Número de generaciones en el AG
param$prob_mutacion = 1/(6+18) #Probabilidad de mutación en el AG
param$n_cols_mat_calif = 2000 #Cota para el número de columnas
param$elige_TC = 0.7 #Probabilidad de elegir un profesor de tiempo completo en el AG
param$mat_info_AG = data.frame(Num_generaciones = 0,
Tam_pob = 0,
Tiempo = 0,
Mejor_calif = 0,
Num_genes_asig_fin = 0,
Calif_asig_fin = 0,
Prom_genes_gen1 = 0,
Prom_genes_generaciones = 0)
#' Se cargan los documentos para definir algunos parámetros
#Matriz con info real de "sem_ini" a "sem_fin":
load(file = paste0("m_grande_total_",param$sem_ini,"_",param$sem_fin,".RData"))
param$m_grande_total = m_grande_total
#Vector con el nombre de las materias utilizadas:
load(file = "vec_nom_materias_total.RData")
param$vec_nom_materias_total = vec_nom_materias_total
#Matriz con el nombre de los profesores:
load(file = "mat_nom_prof_total.RData")
param$mat_nom_prof_total = mat_nom_prof_total
#Matriz con info real de 2015-1 a "sem_fin":
load("m_grande_total_20151_20201.RData")
param$m_grande_2015 = m_grande_total
#Matriz que guarda la información de las pruebas del AG:
load("mat_info_AG.RData")
param$mat_info_AG = mat_info_AG
# param_sim ---------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones
#' encargadas de las simulaciones.
param_sim <- list()
param_sim$vec_sem_sig = 20202
param_sim$k_sem_ant = 5#Número de semestres en la ventana de información
param_sim$Materias = c("Estadística III", #Puede ser una o más materias
"Teoría del Seguro",
"Cálculo Diferencial e Integral I",
"Investigación de Operaciones",
"Geometría Moderna I",
"Geometría Analítica II",
"Lógica Matemática I",
"Cálculo Diferencial e Integral III",
"Estadística I",
"Bases de Datos",
"Matemáticas Financieras",
"Cálculo Diferencial e Integral II",
"Probabilidad I",
"Probabilidad II",
"Procesos Estocásticos I")
param_sim$num_sim = 10#Número de simulaciones
#Submatrices de "m_grande_total":
param_sim$m_filtrada = matrix(0,ncol = length(param$nom_cols_MG))
param_sim$sub_m_filtrada = matrix(0,ncol = length(param$nom_cols_MG))
#Matriz con las posibles combinaciones de q1 y q2:
param_sim$posibles_comb_q = matrix(c(80,85,95,99),ncol = 2,byrow = T)
# mat_def_columnas_MG -----------------------------------------------------
#' Se guarda la matriz "mat_def_columnas_MG" que tiene 3 columnas (Nombre,
#' Número, Descripción) y tantos renglones como columnas tenga la matriz
#' m_grande.
#' Contiene la descripción de las columnas de m_grande.
mat_def_columnas_MG <- matrix(0,ncol = 3,nrow = length(param$nom_cols_MG))
colnames(mat_def_columnas_MG) <- c("Nombre","Número","Descripción")
mat_def_columnas_MG[,1] <- param$nom_cols_MG
mat_def_columnas_MG[,2] <- 1:length(param$nom_cols_MG)
mat_def_columnas_MG[,3] <- c("Nombre del curso impartido",
"Nombre de la persona que va a impartir alguna materia",
"Hora en la que se imparte alguna materia",
"Valores de la columna Horario en variables tipo numeric",
"Espacios disponibles por salón",
"Número de estudiantes inscritos por grupo",
"Espacio físico en el que se imparte alguna materia",
"Clave con la que se identifica una asignación",
"Nombre de alguna carrera de FC",
"Año en el que se implemento un nuevo plan de estudios",
"Semestre al que pertenece la materia (Año y semestre)",
"Clave que indica los cambios que se le han hecho al grupo",
"Matutino: 7:00-14:00hrs, Vespertino: 15:00-21:00",
"Semestre en el que el plan de estudios dicta que se lleva esa materia",
"Nombre de la página de los horarios de FC correspondiente al grupo",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2000 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2006 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2015 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Ciencias de la Computación, plan 1994 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Ciencias de la Computación, plan 2013 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Matemáticas, plan 1983 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Matemáticas Aplicadas, plan 2017 y hay un 0 e.o.c.",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2000",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2006",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2015",
"Indica el nombre de las materia correspondiente a la carrera de Ciencias de la Computación plan 1994",
"Indica el nombre de las materia correspondiente a la carrera de Ciencias de la Computación plan 2013",
"Indica el nombre de las materia correspondiente a la carrera de Matemáticas plan 1983",
"Indica el nombre de las materia correspondiente a la carrera de Matemáticas Aplicadas plan 2017",
"Indica la URL correspondiente a la carrera de Actuaría plan 2000",
"Indica la URL correspondiente a la carrera de Actuaría plan 2006",
"Indica la URL correspondiente a la carrera de Actuaría plan 2015",
"Indica la URL correspondiente a la carrera de Ciencias de la Computación plan 1994",
"Indica la URL correspondiente a la carrera de Ciencias de la Computación plan 2013",
"Indica la URL correspondiente a la carrera de Matemáticas plan 1983",
"Indica la URL correspondiente a la carrera de Matemáticas Aplicadas plan 2017",
"Número de materia con respecto al vector que contiene el nombre de las materias")
# View(mat_def_columnas_MG)
save(mat_def_columnas_MG, file = "mat_def_columnas_MG.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
source("Fn_schedule_simulation.R")
con_xlsx_1_sin_xlsx_0 <- 1 #Leer excel
list_asignacion_final <- gen_asignacion_completa(con_xlsx_1_sin_xlsx_0,param,param_sim)
con_xlsx_1_sin_xlsx_0 <- 1 #Leer excel
list_asignacion_final <- gen_asignacion_completa(con_xlsx_1_sin_xlsx_0,param,param_sim)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo "Fn_schedule_simulation.R".
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
source("Fn_schedule_simulation.R")
con_xlsx_1_sin_xlsx_0 <- 1 #Leer excel
list_asignacion_final <- gen_asignacion_completa(con_xlsx_1_sin_xlsx_0,param,param_sim)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo "Fn_schedule_simulation.R".
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
source("Fn_schedule_simulation.R")
con_xlsx_1_sin_xlsx_0 <- 1 #Leer excel
list_asignacion_final <- gen_asignacion_completa(con_xlsx_1_sin_xlsx_0,param,param_sim)
336/60
mat_asignacion_final <- list_asignacion_final[[1]]
View(mat_asignacion_final)
calif_mejor_elem <- list_asignacion_final[[2]]
mat_calif_generaciones <- list_asignacion_final[[3]]
matrices_calif_x_generacion <- list_asignacion_final[[4]]
mejores_asig <- list_asignacion_final[[5]]
mat_num_genes <- list_asignacion_final[[6]]
mat_esqueleto <- list_asignacion_final[[7]]
mat_solicitudes_real <- list_asignacion_final[[8]]
param <- list_asignacion_final[[9]]
vec_info_AG <- list_asignacion_final[[10]] #Vector con información del AG y sus resultados.
esq_asig_final <- list_asignacion_final[[11]] #Esqueleto de la asignación final.
info_gpos_sin_asig <- list_asignacion_final[[12]]
calif_mejor_elem
max(calif_mejor_elem)
# Guardar info ------------------------------------------------------------
dat_sem_20202_g25_n25_m004_U536 <- list_asignacion_final
save(dat_sem_20202_g25_n25_m004_U536,
file = "C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g25_n25_m004_U-.RData")
save(dat_sem_20202_g25_n25_m004_U536,
file = "C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g25_n25_m004_U-536.RData")
matplot(mat_calif_generaciones)
matplot(mat_calif_generaciones,type = "l")
matplot(mat_calif_generaciones,type = "l",main = "Calificaciones de las asignaciones por generación",
xlab = "Asignaciones",ylab = "Calificaciones")
plot(mejores_asig)
mejores_asig
plot(mat_num_genes)
