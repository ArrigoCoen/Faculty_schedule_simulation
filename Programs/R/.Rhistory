#' lista "list_url".
#'
#' @examples
#' Valida_list_url()
#'
Valida_list_url <- function(list_url,
sem_ini = c(20151,20081,20172,20192)[4], # 1 = Super GRANDE,..., 4 = chica
sem_fin = 20201,
sem_actual = 20201,
Actualiza_RAW_url = TRUE,
Actualiza_limpia_base_url = TRUE,
Actualiza_elimina_grupos_con_0 = TRUE,
Salvar_URL_RData = TRUE,
usar_vec_corto_num_materia = TRUE,
elimina_pags_con_0_grupos = TRUE,
Carpeta_RData = "Archivos RData V01",
usa_grupos_salvados = TRUE,
usa_vec_con_salon = TRUE,
usa_vec_con_info_salvados = TRUE,
planes_estudio = c(119,1176,2017,218,1556,217,2055),
file_name = paste0("Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData"),
file_name_RAW = paste0("Lista_RAW_",list_url$file_name),
nombres_carrera_plan = c("Actuaría (plan 2000)",
"Actuaría (plan 2006)",
"Actuaría (plan 2015)",
"Ciencias de la Computación (plan 1994)",
"Ciencias de la Computación (plan 2013)",
"Matemáticas (plan 1983)",
"Matemáticas Aplicadas (plan 2017)"),
mat_ubicaciones_url = matrix(c("Materia"            ,'#info-contenido h2', T,F,
"Profesor"           ,'tr:nth-child(1) td:nth-child(2) a',F,F,
"Horario"            ,'tr:nth-child(1) td:nth-child(4)',F,T,
"Lugares"            ,'#info-contenido div',F,F,
"Alumnos"            ,'#info-contenido div',F,F,
"Salon"              ,'tr:nth-child(1) td~ td+ td a , td:nth-child(4) a',F,F,
"Grupo"              ,'#info-contenido div',F,F,
"Carrera"            ,'h1',T,F,
"Plan"               ,'h1',T,F,
"Semestre"           ,-1,-1,-1,### FALTA POR HACER
"Cambios"            ,-1,-1,-1,### FALTA POR HACER
"Turno"              ,-1,-1,-1,### FALTA POR HACER
"Semestre_de_materia",'#info-contenido h2',T,F,
"Grupos_x_pag"       ,'strong',F,F,
"Grupo_paralelo"     ,'em',F,F),ncol=4,byrow = T),
# colnames(list_url$mat_ubicaciones_url) = c("Nombre columna","Ubicacion en pagina","Repetir","Elimina salto"),
colnames_mat_posibles_url = c("Semestre","Plan","Materia","URL","Grupos x pag","url_con_salon"),
ncol_mat_posibles_url = length(list_url$colnames_mat_posibles_url),
nrow_mat_posibles_url = 20000,
mat_RAW_url = matrix(0,list_url$nrow_mat_posibles_url,list_url$ncol_mat_posibles_url),
mat_posibles_url = list_url$mat_RAW_url,
utilizar_RAW_anterior = T,
mat_Grande = matrix(0,sum(as.numeric(list_url$mat_posibles_url[,5])),13),
indicadoras_actualiza_col_j_mat_Grande = rep(T,13),
semestres_reales = NA,
num_grupos = NA,
url_con_salon = NA,
# colnames(list_url$mat_Grande) = c("Materia", "Profesor","Horario","Lugares","Alumnos","Salon",
#                                    "Grupo","Carrera","Plan","Semestre","Cambios","Turno","Semestre_de_materia"),
plan_reales = NA,
num_mat_reales = NA,
mat_paginas_error = matrix(0,1,4)) {
# EJEMPLO DE list_url
list_url_EJEMPLO <- list()
list_url_EJEMPLO$sem_ini = 20192 # Datos Chica
list_url_EJEMPLO$sem_fin = 20201
list_url_EJEMPLO$sem_actual = 20201
list_url_EJEMPLO$Actualiza_RAW_url = TRUE
list_url_EJEMPLO$Actualiza_limpia_base_url = TRUE
list_url_EJEMPLO$Actualiza_elimina_grupos_con_0 = TRUE
list_url_EJEMPLO$Salvar_URL_RData = TRUE
list_url_EJEMPLO$usar_vec_corto_num_materia = TRUE
list_url_EJEMPLO$elimina_pags_con_0_grupos = TRUE
list_url_EJEMPLO$Carpeta_RData = "Archivos RData V01"
list_url_EJEMPLO$usa_grupos_salvados = TRUE
list_url_EJEMPLO$usa_vec_con_salon = TRUE
list_url_EJEMPLO$usa_vec_con_info_salvados = TRUE
list_url_EJEMPLO$planes_estudio = c(119,1176,2017,218,1556,217,2055)
list_url_EJEMPLO$file_name <- paste0("Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData")
list_url_EJEMPLO$file_name_RAW <- paste0(list_url$Carpeta_RData,"/Lista_RAW_Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData")
list_url_EJEMPLO$nombres_carrera_plan <- c("Actuaría (plan 2000)",
"Actuaría (plan 2006)",
"Actuaría (plan 2015)",
"Ciencias de la Computación (plan 1994)",
"Ciencias de la Computación (plan 2013)",
"Matemáticas (plan 1983)",
"Matemáticas Aplicadas (plan 2017)")
list_url_EJEMPLO$mat_ubicaciones_url <- matrix(c("Materia"            ,'#info-contenido h2', T,F,
"Profesor"           ,'tr:nth-child(1) td:nth-child(2) a',F,F,
"Horario"            ,'tr:nth-child(1) td:nth-child(4)',F,T,
"Lugares"            ,'#info-contenido div',F,F,
"Alumnos"            ,'#info-contenido div',F,F,
"Salon"              ,'tr:nth-child(1) td~ td+ td a , td:nth-child(4) a',F,F,
"Grupo"              ,'#info-contenido div',F,F,
"Carrera"            ,'h1',T,F,
"Plan"               ,'h1',T,F,
"Semestre"           ,-1,-1,-1,### FALTA POR HACER
"Cambios"            ,-1,-1,-1,### FALTA POR HACER
"Turno"              ,-1,-1,-1,### FALTA POR HACER
"Semestre_de_materia",'#info-contenido h2',T,F,
"Grupos_x_pag"       ,'strong',F,F,
"Grupo_paralelo"     ,'em',F,F),ncol=4,byrow = T)
list_url_EJEMPLO$colnames_mat_posibles_url <- c("Semestre","Plan","Materia","URL","Grupos x pag","url_con_salon")
list_url_EJEMPLO$ncol_mat_posibles_url <- length(list_url_EJEMPLO$colnames_mat_posibles_url)
list_url_EJEMPLO$nrow_mat_posibles_url <- 20000
list_url_EJEMPLO$mat_RAW_url <- matrix(0,list_url_EJEMPLO$nrow_mat_posibles_url,list_url_EJEMPLO$ncol_mat_posibles_url)
list_url_EJEMPLO$mat_posibles_url <- list_url_EJEMPLO$mat_RAW_url
list_url_EJEMPLO$utilizar_RAW_anterior <- T
list_url_EJEMPLO$ncol_mat_Grande <- 13
list_url_EJEMPLO$mat_Grande <- matrix(0,1,list_url_EJEMPLO$ncol_mat_Grande)
list_url_EJEMPLO$mat_Grande_con_url <- matrix(0,1,list_url_EJEMPLO$ncol_mat_Grande+1)
list_url_EJEMPLO$semestres_reales <- NA
list_url_EJEMPLO$plan_reales <- NA
list_url_EJEMPLO$num_mat_reales <- NA
list_url_EJEMPLO$num_grupos <- NA
list_url_EJEMPLO$url_con_salon <- NA
list_url_EJEMPLO$mat_paginas_error <- matrix(0,1,4)
list_url_EJEMPLO$indicadoras_actualiza_col_j_mat_Grande = rep(T,13)
#  Nombres de columnas
colnames(list_url_EJEMPLO$mat_ubicaciones_url) = c("Nombre columna","Ubicacion en pagina","Repetir","Elimina salto")
colnames(list_url_EJEMPLO$mat_Grande) = c("Materia", "Profesor","Horario","Lugares","Alumnos","Salon",
"Grupo","Carrera","Plan","Semestre","Cambios","Turno","Semestre_de_materia")
colnames(list_url_EJEMPLO$mat_paginas_error) <- c("Columna","length(vec)","num_gpo","Pagina")
# INICIO DE VALIDACIONES
error1_bien0 <- 0
# if(length(list_url)!=length(list_url_EJEMPLO)){
if(length(setdiff(names(list_url_EJEMPLO),names(list_url)))>0 || length(setdiff(names(list_url),names(list_url_EJEMPLO))>0)) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t","¡ERROR EN VARIABLES DE list_url!\n")
cat("Faltan las variables:\n\t",setdiff(names(list_url_EJEMPLO),names(list_url)),"\n",
"Sobran las variables:\n\t",setdiff(names(list_url),names(list_url_EJEMPLO)),"\n\n")
}
if(list_url$ncol_mat_Grande != list_url_EJEMPLO$ncol_mat_Grande) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t variable ncol_mat_Grande incorrecta \n",
"Deberían ser ",list_url_EJEMPLO$ncol_mat_Grande," y vale ",
list_url$ncol_mat_Grande,"\n")
}
if(is.null(list_url$mat_Grande)) {
error1_bien0 <- error1_bien0 +1
cat("Error: la matriz mat_Grande es NULL \n")
} else if(ncol(list_url$mat_Grande) != ncol(list_url_EJEMPLO$mat_Grande)) {
error1_bien0 <- error1_bien0 +1
cat("Error en el número de columnas de list_url$mat_Grande \n")
}
if(any(dim(list_url$mat_ubicaciones_url) != dim(list_url_EJEMPLO$mat_ubicaciones_url))) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t números incorrectos en las dimensiones de mat_ubicaciones_url \n",
"Deberían ser ",dim(list_url_EJEMPLO$mat_ubicaciones_url)," y son",
dim(list_url$mat_ubicaciones_url),"\n")
} else if(!all.equal(list_url$mat_ubicaciones_url,list_url_EJEMPLO$mat_ubicaciones_url)){
cat("¡ERROR EN ENTRADAS DE mat_ubicaciones_url \n")
error1_bien0 <- error1_bien0 +1
}
if(list_url$file_name != paste0(list_url$Carpeta_RData,"/Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData")) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t file_name incorrecto, debería ser:\n\t",
paste0(list_url$Carpeta_RData,"/Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData"),
"\n pero es:\n\t",
list_url$file_name,"\n")
}
if(list_url$file_name_RAW != paste0(list_url$Carpeta_RData,"/Lista_RAW_Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData")) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t file_name_RAW incorrecto, debería ser:\n\t",
paste0(list_url$Carpeta_RData,"/Lista_RAW_Dat_URL_",list_url$sem_ini,"_",list_url$sem_fin,".RData"),
"\n pero es:\n\t",
list_url$file_name_RAW,"\n")
}
if(!all(colnames(list_url$mat_Grande)==colnames(list_url_EJEMPLO$mat_Grande))) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t error en nombres de las columnas de list_url$mat_Grande \n")
}
if(nrow(list_url$mat_Grande)!=sum(as.numeric(list_url$mat_posibles_url[,5]))) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t el número de columnas de mat_Grande no coincide con la suma de todos los grupos:\n",
"nrow(list_url$mat_Grande) = ",nrow(list_url$mat_Grande)," y debería ser ",
sum(as.numeric(list_url$mat_posibles_url[,5]))," (la suma de la columna 5 de mat_posibles_url)\n")
}
if(nrow(list_url$mat_Grande_con_url)!=sum(as.numeric(list_url$mat_posibles_url[,5]))) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t el número de columnas de mat_Grande_con_url no coincide con la suma de todos los grupos:\n",
"nrow(list_url$mat_Grande) = ",nrow(list_url$mat_Grande_con_url)," y debería ser ",
sum(as.numeric(list_url$mat_posibles_url[,5]))," (la suma de la columna 5 de mat_posibles_url)\n")
}
if(nrow(list_url$mat_posibles_url)!=length(list_url$num_grupos)) {
error1_bien0 <- error1_bien0 +1
cat("Error",error1_bien0,":\n\t número de renglones de mat_posibles_url no coincide con longitud de num_grupos\n",
"nrow(list_url$mat_posibles_url) = ",nrow(list_url$mat_posibles_url)," y \n",
"length(list_url$num_grupos)=",length(list_url$num_grupos),"\n")
}
if(error1_bien0 >0) {
cat(" *** EXISTEN",error1_bien0,"ERRORES EN list_url *** \n")
return(F)
} else {
cat(" *** La variable list_url es adecuada ***\n")
return(T)
}
}
posibles_url(list_url)
# posibles_url ------------------------------------------------------------
#' Title: posibles_url: Función que arroja la lista "list_url"  dentro de
#' la cual se encuentra la matriz con las posibles URL de las páginas de
#' horarios de la FC. Dicha matriz tiene 6 columnas: Semestre, Plan,
#' Materia, URL, Grupos por página, url_con_salon. Las últimas 2 columnas
#' se llenan con la función "Actualiza_list_url"
#'
#' @param list_url
#'
#' @return list_url: Lista con la información de posibles URL de la Facultad
#' de Ciencias.
#'
#' @examples
#' list_url <- posibles_url(list_url)
#'
posibles_url = function(list_url){
if(!Valida_list_url(list_url)){
return(list_url)
}
# En caso de ya existir el archivo con la matriz RAW
if(file.exists(list_url$file_name_RAW) && list_url$utilizar_RAW_anterior){
list_url_nueva <- list_url
# Cargando matriz RAW ya existente
load(list_url$file_name_RAW)
Sys.sleep(1)
# Actualizando variables que actualizaría esta función
nrow_anterior <- nrow(list_url$mat_RAW_url[,1:4])
list_url_nueva$mat_RAW_url = cbind(list_url$mat_RAW_url[,1:4],
rep(0,nrow_anterior),
rep(0,nrow_anterior))
list_url_nueva$mat_posibles_url = cbind(list_url$mat_posibles_url[,1:4],
rep(0,nrow_anterior),
rep(0,nrow_anterior))
list_url_nueva$semestres_reales = list_url$semestres_reales
list_url_nueva$plan_reales = list_url$plan_reales
list_url_nueva$num_mat_reales = list_url$num_mat_reales
list_url_nueva$nrow_mat_posibles_url <- nrow(list_url_nueva$mat_posibles_url)
if(length(list_url_nueva$num_grupos)!=nrow(list_url_nueva$mat_posibles_url)) {
cat("Se borró la información de num_grupos por no ser de la longitud correcta:\n",
"length(num_grupos) = ",length(list_url_nueva$num_grupos),
"nrow(mat_posibles_url) = ",nrow(list_url_nueva$mat_posibles_url),"\n\n")
list_url_nueva$num_grupos = rep(-1, nrow(list_url_nueva$mat_posibles_url))
}
# Guardamos la información
list_url  <- list_url_nueva
# Corregimos mat_Grande
if(nrow(list_url$mat_Grande) == 0) {
list_url$mat_Grande <- matrix(-1,sum(as.numeric(list_url$mat_posibles_url[,5])),
list_url$ncol_mat_Grande)
colnames(list_url$mat_Grande) <- c("Materia", "Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia")
}
cat("Se utilizará la matriz RAW ya existente del archivo:","\n\n",
list_url$file_name_RAW,"\n\n")
return(list_url)
}
sem_ini <- list_url$sem_ini
sem_fin <- list_url$sem_fin
# usar_vec_corto_num_materia <- list_url$usar_vec_corto_num_materia
# Start the clock!
ptm <- proc.time()
## Sólo se van a tomar en cuenta los planes de estudio vigentes
planes_estudio = list_url$planes_estudio
#Inicializamos las variables:
if(list_url$usar_vec_corto_num_materia) {
load(paste0(list_url$Carpeta_RData,"/Datos_INTERVALO_NUM_MATERIA.RData"))
} else intervalo_num_materia = 1:2000 # Obs: el más grande encontrado fue 1841
# intervalo_num_materia = 800:815
mat_posibles_url = matrix(0, nrow = list_url$nrow_mat_posibles_url,
ncol = list_url$ncol_mat_posibles_url)
colnames(mat_posibles_url) <- list_url$colnames_mat_posibles_url
## Se crea el vector para los semestres pares e impares
(semestres = (list_url$sem_ini:list_url$sem_fin)[(list_url$sem_ini:list_url$sem_fin)
%% 10>0 &
(list_url$sem_ini:list_url$sem_fin)
%% 10<3])
semestres_reales <- c(NULL)
plan_reales <- c(NULL)
num_mat_reales <- c(NULL)
i_sem <- 1
i_plan <- 1
i_num_materia <- 1
title_plot <- "Progreso de extracción url"
i = 0
for(i_sem in 1:length(semestres)){
for(i_plan in 1:length(planes_estudio)) {
for(i_num_materia in 1:length(intervalo_num_materia)) {
# Graficamos el avance de la extracción
if(i_num_materia/100==floor(i_num_materia/100)){
# Sys.sleep(0.06)
names_percentages <- c(paste0("Semestre ",semestres[i_sem]),
paste0("Plan ",planes_estudio[i_plan]),"Materias")
My_plot_progress(c(i_sem/length(semestres),i_plan/length(planes_estudio),
i_num_materia/length(intervalo_num_materia)),
names_percentages,title_plot)
} # fi graficando
url = paste0("http://www.fciencias.unam.mx/docencia/horarios/",semestres[i_sem],
"/",planes_estudio[i_plan],
"/",intervalo_num_materia[i_num_materia])
#Probamos si la página existe:
tryCatch({
read_html(url)
i <- i+1
mat_posibles_url[i,1:4] <- c(semestres[i_sem],
planes_estudio[i_plan],
intervalo_num_materia[i_num_materia],
url)
semestres_reales <- c(semestres_reales,semestres[i_sem])
plan_reales <- c(plan_reales,planes_estudio[i_plan])
num_mat_reales <- c(num_mat_reales,intervalo_num_materia[i_num_materia])
},
error=function(e){})
} # fin for materias
} # fin for planes
} # fin de for semestres
semestres_reales <- unique(na.omit(semestres_reales))
plan_reales <- unique(na.omit(plan_reales))
num_mat_reales <- unique(na.omit(num_mat_reales))
names_percentages <- c(paste0("Semestre ",semestres[i_sem]),
paste0("Plan ",planes_estudio[i_plan]),"Materias")
My_plot_progress(c(1,1,1),names_percentages,title_plot)
##Quitamos los renglones vacíos de la matriz:
# mat_posibles_url = mat_posibles_url[1:i,]
n_renglones<- dim(mat_posibles_url)[1]
mat_posibles_url = matrix(mat_posibles_url[mat_posibles_url[1:n_renglones,1]!=0],ncol = 6)
# Regresamos una lista con los valores adecuados
list_url$mat_RAW_url=mat_posibles_url
list_url$mat_posibles_url=mat_posibles_url
list_url$semestres_reales=semestres_reales
list_url$plan_reales=plan_reales
list_url$num_mat_reales=num_mat_reales
if(nrow(list_url$mat_Grande) == 0) {
list_url$mat_Grande <- matrix(-1,sum(as.numeric(list_url$mat_posibles_url[,5])),
list_url$ncol_mat_Grande)
colnames(list_url$mat_Grande) <- c("Materia", "Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia")
}
# Salvando intervalo de materia para futuras corridas
intervalo_num_materia <- sort(list_url$num_mat_reales)
archivo_intervalo_num_materia <- paste0(list_url$Carpeta_RData,
"/Datos_INTERVALO_NUM_MATERIA.RData")
save(intervalo_num_materia, file = archivo_intervalo_num_materia)
# Stop the clock
cat("La función posibles_url tardó: ",(proc.time()-ptm)[3]/60," minutos\n")
return(list_url)
}
# url_con1_sin0_info ------------------------------------------------------
#' Title: url_con1_sin0_info
#' @param url: página de internet correspondiente a algún horario de la FC
#'
#' @return 1 si la página tiene información, 0 si no
#'
#' @example url = paste0("http://www.fciencias.unam.mx/docencia/horarios/",sem,"/",
#' plan,"/",num_materia)
url_con1_sin0_info = function(url){
valor_url = 0
tryCatch({
webpage <- read_html(url)
profesor_data_html <- html_nodes(webpage,'tr:nth-child(1) td:nth-child(1)')
(profesor <- html_text(profesor_data_html))
if(length(profesor) > 0){
valor_url = 1
}
}, error=function(e){})
return(valor_url)
}
# url_con1_sin0_info ------------------------------------------------------
#' Title url_con1_sin0_info: Función que indica si una URL tiene o no
#' información.
#'
#' @param url: Página de internet de los horarios de la Facultad de Ciencias.
#'
#' @return 1 si la página tiene información, 0 si no.
#'
#' @examples
#' url_con1_sin0_info("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541")
#'
url_con1_sin0_info = function(url){
valor_url = 0
tryCatch({
webpage <- read_html(url)
profesor_data_html <- html_nodes(webpage,'tr:nth-child(1) td:nth-child(1)')
(profesor <- html_text(profesor_data_html))
if(length(profesor) > 0){
valor_url = 1
}
}, error=function(e){})
return(valor_url)
}
url_con1_sin0_info("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541")
url_con1_sin0_info("http://www.fciencias.unam.mx/docencia/horarios/20081/1556/803")
url_con1_sin0_info("http://www.fciencias.unam.mx/docencia/horarios/20081/1556/803")
# url_con_info ------------------------------------------------------------
#' Title url_con_info: Función que verifica si cada URL tiene o no información.
#'
#' @param list_url: Lista con la información de posibles URL de la Facultad
#' de Ciencias.
#'
#' @return vec_con_info: Vector binario que indica si cada url tiene o no
#' información.
#'
#' @examples
#' vec_con_info <- url_con_info(list_url)
#'
url_con_info <- function(list_url){
if(file.exists(paste0(list_url$Carpeta_RData,"/Datos_vec_con_info_",
list_url$sem_ini,"_",list_url$sem_fin,".RData")) &&
list_url$usa_vec_con_info_salvados) {
cat("Se utilizara del archivo \n\t",
paste0(list_url$Carpeta_RData,"/Datos_vec_con_info_",list_url$sem_ini,"_",
list_url$sem_fin,".RData"),"\n\n")
load(paste0(list_url$Carpeta_RData,"/Datos_vec_con_info_",list_url$sem_ini,"_",
list_url$sem_fin,".RData"))
Sys.sleep(1)
} else {
mat_posibles_url <- list_url$mat_posibles_url
vec_posibles_url = mat_posibles_url[,4] # la col 4 contiene URL
vec_con_info = rep(-1,length(vec_posibles_url))
vec_para_for <- 1:length(vec_posibles_url)
pb <- txtProgressBar(min = 1, max = length(vec_para_for), style = 3, width = 60)
cat("Limpiando mat_posibles_url:\n")
for(i in vec_para_for){
setTxtProgressBar(pb, i)
vec_con_info[i] = url_con1_sin0_info(as.character(mat_posibles_url[i,4]))
}
close(pb)
print("\n")
cat("Se encontraron ",mean(vec_con_info==1)*100,"% url con información\n")
}
save(vec_con_info,
file = paste0(list_url$Carpeta_RData,"/Datos_vec_con_info_",list_url$sem_ini,"_",list_url$sem_fin,".RData"))
return(vec_con_info)
}
# limpia_base_url ---------------------------------------------------------
#' Title limpia_base_url: Función que quita las URL de "mat_posibles_url"
#' que no tienen información.
#'
#' @param list_url: Lista con la información de posibles URL de la Facultad
#' de Ciencias.
#'
#' @return list_url: Lista con la información de posibles URL de la Facultad
#' de Ciencias.
#'
#' @examples
#' list_url <- limpia_base_url(list_url)
#'
limpia_base_url <- function(list_url){
# mat_posibles_url <- list_url$mat_posibles_url
longitud_original <- nrow(list_url$mat_posibles_url)
# Primero borramos las que no tengan información
vec_con_info = url_con_info(list_url)
# mat_limpia1_url = mat_posibles_url[vec_con_info>0,] # ANTES
list_url$mat_posibles_url = list_url$mat_posibles_url[vec_con_info>0,] # AHORA
list_url$num_grupos = list_url$num_grupos[vec_con_info>0] # AHORA
longitud_nueva <- nrow(list_url$mat_posibles_url)
cat("La longitud original era ",longitud_original," la nueva longitud es ",
longitud_nueva,":\n\t se borraron ",longitud_original-longitud_nueva,
" un ",(longitud_original-longitud_nueva)*100/longitud_original,"% \n")
return(list_url)
}
url_con1_sin0_salon("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541")
# url_con1_sin0_salon -----------------------------------------------------
#' Title url_con1_sin0_salon: Función revisa si en la URL hay grupos con o
#' sin salón por grupo.
#'
#' @param url: Página de internet de los horarios de la Facultad de Ciencias.
#'
#' @return 1 si la página tiene información, 0 si no.
#'
#' @example
#' url_con1_sin0_salon("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541")
#' url_con1_sin0_salon("")
#'
url_con1_sin0_salon <- function(url){
valor_url <- 0
tryCatch({
webpage <- read_html(url)
salon_data_html <- html_nodes(webpage,'tr:nth-child(1) td~ td+ td a')
salon <- html_text(salon_data_html)
if(length(salon) > 0){
valor_url <- 1
}
}, error=function(e){})
return(valor_url)
}
url_con1_sin0_salon("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541")
url_con1_sin0_salon("http://www.fciencias.unam.mx/docencia/horarios/20081/119/4")
# borra_i_posible_grupo ---------------------------------------------------
#' Title borra_i_posible_grupo: Función que borra renglones de "vec" que
#' contengan "string_a_buscar".
#'
#' @param string_a_buscar: String con las palabras que se quieren borrar
#' de un grupo.
#' @param vec: String con el que se compara "string_a_buscar".
#'
#' @return vec: String corregido.
#'
#' @examples
#' borra_i_posible_grupo("especial",vec)
#' borra_i_posible_grupo("Especial",vec)
#' borra_i_posible_grupo("paralelo a ",vec)
#' borra_i_posible_grupo("xtraordinario por etapas",vec)
#'
borra_i_posible_grupo <- function(string_a_buscar,vec){
i_a_borrar <- grep(string_a_buscar, vec)
if(length(i_a_borrar)>0) {
vec <- vec[-(c(i_a_borrar,i_a_borrar-1))]
}
return(vec)
}
