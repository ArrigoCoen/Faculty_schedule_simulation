mat_info_un_pag[,13] <- substr(materia_y_semestre_de_materia,
regexpr(',',materia_y_semestre_de_materia)[1]+2,
nchar(materia_y_semestre_de_materia)) # Semestre_de_materia
# 14 url
mat_info_un_pag[,14] <- url
i <- 2
i <- 1
# Con este for extraemos variables que cambian por grupo:
# 2 Profesor
# 3 Horario
# 4 Lugares
# 5 Alumnos
# 6 Salón
# 7 Grupo
for(i in 1:nrow(mat_info_un_pag)){
x <- vec[i]
x <- strsplit(x,"\n")[[1]]
x
texto <- vec[i]
texto
# Separamos con respecto a \n
texto <- strsplit(texto, split='\n', fixed=TRUE)[[1]]
texto
# Encontramos los lugares de profesor y ayudante
i_profesores <- which(unlist(gregexpr('Profesor', texto))>0)+1
i_ayudantess <- which(unlist(gregexpr('Ayudante', texto))>0)+1
# Posibles mejoras utilizando los horarios de ayudantes
# i_horariosss <- c(i_profesores,i_ayudantess)+1
as.vector(regexpr(' a ', texto))
aux_encuentra_a <- which(as.vector(regexpr(' a ', texto))>-1)
aux_encuentra_a <- aux_encuentra_a[aux_encuentra_a>2]
aux_encuentra_a
i_horariosss <- aux_encuentra_a
i_horariosss
# Hacemos los vectores de prof y ayudante
vec_i_profesores <- sort(unique(texto[i_profesores]))
vec_i_ayudantess <- sort(unique(texto[i_ayudantess]))
vec_i_horariosss <- sort(unique(texto[i_horariosss]))
vec_i_profesores
vec_i_ayudantess
vec_i_horariosss
# Eliminamos na
vec_i_profesores <- paste(vec_i_profesores[!is.na(vec_i_profesores)],collapse = " / ")
vec_i_ayudantess <- paste(vec_i_ayudantess[!is.na(vec_i_ayudantess)],collapse = " / ")
vec_i_horariosss <- paste(vec_i_horariosss[!is.na(vec_i_horariosss)],collapse = " / ")
vec_i_profesores
vec_i_ayudantess
vec_i_horariosss
# mat_info_un_pag[i,3] <- x[8] # horario
mat_info_un_pag[i,2] <- vec_i_profesores
mat_info_un_pag[i,3] <- vec_i_horariosss # horario
# Obs: se podría guardar la informacion de vec_i_ayudantess
if(regexpr('lugares', x[1])[1]>0) {
mat_info_un_pag[i,4] <- substr(x[1],7,regexpr('lugares', x[1])[1]-2) # lugares
mat_info_un_pag[i,5] <- substr(x[1],regexpr('lugares', x[1])[1]+9,
regexpr('alumno', x[1])[1]-2) # alumnos
} else {
mat_info_un_pag[i,4] <- "" # lugares
mat_info_un_pag[i,5] <- substr(x[1],6,regexpr('alumno', x[1])[1]-2) # alumnos
}
if(mat_info_un_pag[i,5]=="Un") mat_info_un_pag[i,5] <- "1" # alumnos
mat_info_un_pag[i,6] <- x[9] # salon
mat_info_un_pag[i,7] <- substr(x[1],1,4) # grupo
}
}else{
mat_info_un_pag <- matrix(0,length(vec),14)
}##Fin de if(vec!=0)
return(mat_info_un_pag)
}
extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143")
##### PARÁMETROS INICIALES #####
#Se establece el directorio en el que se va a trabajar
# setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
#' Se instalan los paquetes necesarios para algunas funciones que se van
#' a utilizar.
# install.packages('zoo')
# install.packages('rvest')
# install.packages('dplyr')
# install.packages('purrr')
# install.packages('forecast')
# install.packages('xml2')
# install.packages('miceadds')
# install.packages('rJava')
# install.packages('xlsx')
# install.packages("writexl")
# install.packages('astsa')
# install.packages('ggplot2')
# install.packages('knitr')
# install.packages('printr')
# install.packages('plyr')
# install.packages('lubridate')
# install.packages('gridExtra')
# install.packages('reshape2')
# install.packages('TTR')
# install.packages('randomcoloR')
# install.packages('manipulate')
# install.packages('fitdistrplus')
# install.packages('stringdist')
# install.packages('plotGMM')
# install.packages('mixtools')
# install.packages('ggplot2')
# install.packages('randtests')
# install.packages('stats')
# install.packages('seastests')
# install.packages('tseries')
# install.packages('lmtest')
# install.packages('het.test')
# install.packages('magrittr')
# install.packages('dplyr')
# install.packages('resample')
# install.packages('ggpubr')
# install.packages('xtable')
# install.packages('readxl')
# install.packages('RColorBrewer')
#' Se cargan los paquetes
library(zoo)
library(rvest)
library(purrr)
library(forecast)
library(xml2)
library(stringr)
library(xlsx)
library(writexl)
library(RColorBrewer)
library(astsa, quietly=TRUE, warn.conflicts=FALSE)
library(ggplot2)
library(knitr)
library(printr)
library(plyr)
library(lubridate)
library(gridExtra)
library(reshape2)
library(TTR)
library(randomcoloR)
library(manipulate)
library(fitdistrplus)
library(stringdist)
library(plotGMM)
library(mixtools)
library(ggplot2)
library(randtests)
library(stats)
library(seastests)
library(tseries)
library(lmtest)
library(het.test)
library(magrittr)
library(dplyr)
library(resample)
library(ggpubr)
library(xtable)
library(readxl)
# param -------------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones.
param <- list()
param$sem_ini = 20081##Inicio de información real
param$sem_fin = 20201##Fin de información real
param$sem_sig = 20202##Semestre de simulación
#Vector con los semestres del 2008-1 al 2020-2:
param$sem_totales = (20081:20202)[(20081:20202)%% 10>0 &(20081:20202)%% 10<3]
#Vector con los semestres de "sem_ini" a "sem_fin":
param$Semestres = (param$sem_ini:param$sem_fin)[(param$sem_ini:param$sem_fin)
%% 10>0
&(param$sem_ini:param$sem_fin)
%% 10<3]
param$nombre_sem = as.character(param$Semestres)#Semestres en tipo caracter
#Número de semestres anteriores al semestre de simulación:
param$n_semestres_anteriores = length(param$Semestres)
#Horas en las que se imparten las clases:
param$Horas = c(7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)
param$nombre_hrs = c("7-8","8-9","9-10","10-11","11-12",
"12-13","13-14","14-15","15-16",
"16-17","17-18","18-19","19-20",
"20-21","21-22")
#' Valores de los cuantiles de los intervalos de confianza para simular el
#' número de alumnos:
param$q1 = 85
param$q2 = 80
#' Nombres de las columnas para las matrices "m_grande":
param$nom_cols_m14 = c("Materia","Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno",
"Semestre_de_materia","url")
param$nom_cols_MG = c("Materia","Profesor","Horario","horario_num",
"Lugares","Alumnos","Salon","Grupo","Carrera",
"Plan","Semestre","Cambios","Turno",
"Semestre_de_materia","url","Act2000","Act2006",
"Act2015","CdC1994","CdC2013","Mat1983","MAp2017",
"NomMat_Act2000","NomMat_Act2006","NomMat_Act2015",
"NomMat_CdC1994","NomMat_CdC2013","NomMat_Mat1983",
"NomMat_MAp2017","URL_Act2000","URL_Act2006",
"URL_Act2015","URL_CdC1994","URL_CdC2013",
"URL_Mat1983","URL_MAp2017","Num_materia")
param$m_grande_total = matrix(0,ncol = length(param$nom_cols_MG))
param$m_grande_2015 = matrix(0,ncol = length(param$nom_cols_MG))
param$vec_nom_materias_total = 0
param$mat_nom_prof_total = 0
param$num_max_asig = 2 #Número máximo de materias asignadas por profesor
param$cota_TC = 1000 #Cota para ciclo
param$cota_asig = 6000 #Cota para ciclo
param$tam_poblacion = 5 #Tamaño de la población en el Algoritmo Genético (AG)
param$num_generaciones = 2 #Número de generaciones en el AG
param$prob_mutacion = 1/(6+18) #Probabilidad de mutación en el AG
param$n_cols_mat_calif = 2000 #Cota para el número de columnas
param$elige_TC = 0.7 #Probabilidad de elegir un profesor de tiempo completo en el AG
param$mat_info_AG = data.frame(Num_generaciones = 0,
Tam_pob = 0,
Tiempo = 0,
Mejor_calif = 0,
Num_genes_asig_fin = 0,
Calif_asig_fin = 0,
Prom_genes_gen1 = 0,
Prom_genes_generaciones = 0)
#' Se cargan los documentos para definir algunos parámetros
#Matriz con info real de "sem_ini" a "sem_fin":
load(file = paste0("m_grande_total_",param$sem_ini,"_",param$sem_fin,".RData"))
param$m_grande_total = m_grande_total
#Vector con el nombre de las materias utilizadas:
load(file = "vec_nom_materias_total.RData")
param$vec_nom_materias_total = vec_nom_materias_total
#Matriz con el nombre de los profesores:
load(file = "mat_nom_prof_total.RData")
param$mat_nom_prof_total = mat_nom_prof_total
#Matriz con info real de 2015-1 a "sem_fin":
load("Matrices m_grande_total/m_grande_total_20151_20201.RData")
param$m_grande_2015 = m_grande_total
#Matriz que guarda la información de las pruebas del AG:
load("mat_info_AG.RData")
param$mat_info_AG = mat_info_AG
# param_sim ---------------------------------------------------------------
#' Definimos una lista con distintos parámetros utilizados en las funciones
#' encargadas de las simulaciones.
param_sim <- list()
param_sim$vec_sem_sig = 20202
param_sim$k_sem_ant = 5#Número de semestres en la ventana de información
param_sim$Materias = c("Estadística III", #Puede ser una o más materias
"Teoría del Seguro",
"Cálculo Diferencial e Integral I",
"Investigación de Operaciones",
"Geometría Moderna I",
"Geometría Analítica II",
"Lógica Matemática I",
"Cálculo Diferencial e Integral III",
"Estadística I",
"Bases de Datos",
"Matemáticas Financieras",
"Cálculo Diferencial e Integral II",
"Probabilidad I",
"Probabilidad II",
"Procesos Estocásticos I")
param_sim$num_sim = 10#Número de simulaciones
#Submatrices de "m_grande_total":
param_sim$m_filtrada = matrix(0,ncol = length(param$nom_cols_MG))
param_sim$sub_m_filtrada = matrix(0,ncol = length(param$nom_cols_MG))
#Matriz con las posibles combinaciones de q1 y q2:
param_sim$posibles_comb_q = matrix(c(80,85,95,99),ncol = 2,byrow = T)
# mat_def_columnas_MG -----------------------------------------------------
#' Se guarda la matriz "mat_def_columnas_MG" que tiene 3 columnas (Nombre,
#' Número, Descripción) y tantos renglones como columnas tenga la matriz
#' m_grande.
#' Contiene la descripción de las columnas de m_grande.
mat_def_columnas_MG <- matrix(0,ncol = 3,nrow = length(param$nom_cols_MG))
colnames(mat_def_columnas_MG) <- c("Nombre","Número","Descripción")
mat_def_columnas_MG[,1] <- param$nom_cols_MG
mat_def_columnas_MG[,2] <- 1:length(param$nom_cols_MG)
mat_def_columnas_MG[,3] <- c("Nombre del curso impartido",
"Nombre de la persona que va a impartir alguna materia",
"Hora en la que se imparte alguna materia",
"Valores de la columna Horario en variables tipo numeric",
"Espacios disponibles por salón",
"Número de estudiantes inscritos por grupo",
"Espacio físico en el que se imparte alguna materia",
"Clave con la que se identifica una asignación",
"Nombre de alguna carrera de FC",
"Año en el que se implemento un nuevo plan de estudios",
"Semestre al que pertenece la materia (Año y semestre)",
"Clave que indica los cambios que se le han hecho al grupo",
"Matutino: 7:00-14:00hrs, Vespertino: 15:00-21:00",
"Semestre en el que el plan de estudios dicta que se lleva esa materia",
"Nombre de la página de los horarios de FC correspondiente al grupo",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2000 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2006 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Actuaría, plan 2015 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Ciencias de la Computación, plan 1994 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Ciencias de la Computación, plan 2013 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Matemáticas, plan 1983 y hay un 0 e.o.c.",
"Columna binaria, tiene un 1 si el grupo pertenece a la carrera de Matemáticas Aplicadas, plan 2017 y hay un 0 e.o.c.",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2000",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2006",
"Indica el nombre de las materia correspondiente a la carrera de Actuaría plan 2015",
"Indica el nombre de las materia correspondiente a la carrera de Ciencias de la Computación plan 1994",
"Indica el nombre de las materia correspondiente a la carrera de Ciencias de la Computación plan 2013",
"Indica el nombre de las materia correspondiente a la carrera de Matemáticas plan 1983",
"Indica el nombre de las materia correspondiente a la carrera de Matemáticas Aplicadas plan 2017",
"Indica la URL correspondiente a la carrera de Actuaría plan 2000",
"Indica la URL correspondiente a la carrera de Actuaría plan 2006",
"Indica la URL correspondiente a la carrera de Actuaría plan 2015",
"Indica la URL correspondiente a la carrera de Ciencias de la Computación plan 1994",
"Indica la URL correspondiente a la carrera de Ciencias de la Computación plan 2013",
"Indica la URL correspondiente a la carrera de Matemáticas plan 1983",
"Indica la URL correspondiente a la carrera de Matemáticas Aplicadas plan 2017",
"Número de materia con respecto al vector que contiene el nombre de las materias")
# View(mat_def_columnas_MG)
save(mat_def_columnas_MG, file = "mat_def_columnas_MG.RData")
extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143")
# borra_i_posible_grupo ---------------------------------------------------
#' Title borra_i_posible_grupo: Función que borra renglones de "vec" que
#' contengan "string_a_buscar".
#'
#' @param string_a_buscar: String con las palabras que se quieren borrar
#' de un grupo.
#' @param vec: String con el que se compara "string_a_buscar".
#'
#' @return vec: String corregido.
#'
#' @examples
#' borra_i_posible_grupo("especial",vec)
#' borra_i_posible_grupo("Especial",vec)
#' borra_i_posible_grupo("paralelo a ",vec)
#' borra_i_posible_grupo("xtraordinario por etapas",vec)
#'
borra_i_posible_grupo <- function(string_a_buscar,vec){
i_a_borrar <- grep(string_a_buscar, vec)
if(length(i_a_borrar)>0) {
vec <- vec[-(c(i_a_borrar,i_a_borrar-1))]
}
return(vec)
}
# extrae_info_1_pag -------------------------------------------------------
#' Title extrae_info_1_pag: Función que extrae la información de una página
#' con los horarios de la Facultad de Ciencias.
#'
#' @param url: Página de internet de los horarios de la Facultad de Ciencias.
#'
#' @return mat_info_un_pag: Matriz con 14 columnas (Materia, Profesor,
#' Horario, Lugares, Alumnos, Salon, Grupo, Carrera, Plan, Semestre,
#' Cambios, Turno, Semestre_de_materia, url)
#'
#' @examples
#'extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143")
#'
extrae_info_1_pag <- function(url) {
cat("\nLeyendo url: ",url)
# Sacamos toda la información de una página
webpage <- read_html(url)
data_html <- html_nodes(read_html(url),'#info-contenido')
vec <- html_text(data_html)
vec <- strsplit(vec,"Grupo ")[[1]] # [1] "a" "b" "c" "c" "b" "a"
vec <- vec[-1]
vec
vec_strings_a_borrar <- c("especial","Especial","paralelo a ","xtraordinario por etapas")
vec_strings_a_corrige <- c("exclusivo para ","semipresencial","nuevo aprobado por el CT")
for(string_a_buscar in vec_strings_a_borrar)
vec <- borra_i_posible_grupo(string_a_buscar,vec)
##En este ciclo "vec" puede quedar vacío por lo que se pone una
##condición en el siguiente for para que el programa no se detenga
if(identical(vec,character(0))){
vec <- 0
}else{
for(string_a_buscar in vec_strings_a_corrige)
vec <- corrige_i_posible_grupo(string_a_buscar,vec)
}
if(identical(vec,character(0))){
vec <- 0
}
vec
# if(length(vec)>1){
if(vec!=0){##Puede tener longitud 1 y si tener información (con esta condición)
##se generan "warnings" cuando si hay información en "vec"
mat_info_un_pag <- matrix(0,length(vec),14)
# colnames(mat_info) <- c("grupo","lugares","alumnos","profesor","horario","salon")
colnames(mat_info_un_pag) <- c("Materia","Profesor","Horario","Lugares",
"Alumnos","Salon","Grupo","Carrera","Plan",
"Semestre","Cambios","Turno","Semestre_de_materia","url")
# Extraemos de la página materia y semestre_de_materia
materia_y_semestre_de_materia <- html_text(html_nodes(webpage,'#info-contenido h2'))
# Extraemos variables constantes entre grupos:
# 1  Materia
# 8  Carrera
# 9  Plan
# 10 Semestre
# 13 Semestre_de_materia
# 14 url
# 1  Materia
mat_info_un_pag[,1] <- substr(materia_y_semestre_de_materia,1,
regexpr(',', materia_y_semestre_de_materia)[1]-1)  # Materia
# Extraemos de la página la carrera y el plan
carrera_plan <- html_text(html_nodes(webpage,'h1'))
# 8  Carrera
mat_info_un_pag[,8] <- substr(carrera_plan,1,nchar(carrera_plan)-12) # Carrera
# 9  Plan
mat_info_un_pag[,9] <- substr(carrera_plan,nchar(carrera_plan)-4,nchar(carrera_plan)-1)#Plan
# 10 Semestre
mat_info_un_pag[,10] <- substr(url,48,52) # Semestre
# 13 Semestre_de_materia
mat_info_un_pag[,13] <- substr(materia_y_semestre_de_materia,
regexpr(',',materia_y_semestre_de_materia)[1]+2,
nchar(materia_y_semestre_de_materia)) # Semestre_de_materia
# 14 url
mat_info_un_pag[,14] <- url
i <- 2
i <- 1
# Con este for extraemos variables que cambian por grupo:
# 2 Profesor
# 3 Horario
# 4 Lugares
# 5 Alumnos
# 6 Salón
# 7 Grupo
for(i in 1:nrow(mat_info_un_pag)){
x <- vec[i]
x <- strsplit(x,"\n")[[1]]
x
texto <- vec[i]
texto
# Separamos con respecto a \n
texto <- strsplit(texto, split='\n', fixed=TRUE)[[1]]
texto
# Encontramos los lugares de profesor y ayudante
i_profesores <- which(unlist(gregexpr('Profesor', texto))>0)+1
i_ayudantess <- which(unlist(gregexpr('Ayudante', texto))>0)+1
# Posibles mejoras utilizando los horarios de ayudantes
# i_horariosss <- c(i_profesores,i_ayudantess)+1
as.vector(regexpr(' a ', texto))
aux_encuentra_a <- which(as.vector(regexpr(' a ', texto))>-1)
aux_encuentra_a <- aux_encuentra_a[aux_encuentra_a>2]
aux_encuentra_a
i_horariosss <- aux_encuentra_a
i_horariosss
# Hacemos los vectores de prof y ayudante
vec_i_profesores <- sort(unique(texto[i_profesores]))
vec_i_ayudantess <- sort(unique(texto[i_ayudantess]))
vec_i_horariosss <- sort(unique(texto[i_horariosss]))
vec_i_profesores
vec_i_ayudantess
vec_i_horariosss
# Eliminamos na
vec_i_profesores <- paste(vec_i_profesores[!is.na(vec_i_profesores)],collapse = " / ")
vec_i_ayudantess <- paste(vec_i_ayudantess[!is.na(vec_i_ayudantess)],collapse = " / ")
vec_i_horariosss <- paste(vec_i_horariosss[!is.na(vec_i_horariosss)],collapse = " / ")
vec_i_profesores
vec_i_ayudantess
vec_i_horariosss
# mat_info_un_pag[i,3] <- x[8] # horario
mat_info_un_pag[i,2] <- vec_i_profesores
mat_info_un_pag[i,3] <- vec_i_horariosss # horario
# Obs: se podría guardar la informacion de vec_i_ayudantess
if(regexpr('lugares', x[1])[1]>0) {
mat_info_un_pag[i,4] <- substr(x[1],7,regexpr('lugares', x[1])[1]-2) # lugares
mat_info_un_pag[i,5] <- substr(x[1],regexpr('lugares', x[1])[1]+9,
regexpr('alumno', x[1])[1]-2) # alumnos
} else {
mat_info_un_pag[i,4] <- "" # lugares
mat_info_un_pag[i,5] <- substr(x[1],6,regexpr('alumno', x[1])[1]-2) # alumnos
}
if(mat_info_un_pag[i,5]=="Un") mat_info_un_pag[i,5] <- "1" # alumnos
mat_info_un_pag[i,6] <- x[9] # salon
mat_info_un_pag[i,7] <- substr(x[1],1,4) # grupo
}
}else{
mat_info_un_pag <- matrix(0,length(vec),14)
}##Fin de if(vec!=0)
return(mat_info_un_pag)
}
extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143")
# corrige_i_posible_grupo -------------------------------------------------
#' Title corrige_i_posible_grupo: Función que une la entrada anterior y la
#' que contiene a "string_a_buscar".
#'
#' @param string_a_buscar: String con las palabras que se quieren borrar
#' de un grupo.
#' @param vec: String con el que se compara "string_a_buscar".
#'
#' @return vec: String corregido.
#'
#' @examples
#' corrige_i_posible_grupo("exclusivo para ",vec)
#' corrige_i_posible_grupo("semipresencial",vec)
#' corrige_i_posible_grupo("nuevo aprobado por el CT",vec)
#'
corrige_i_posible_grupo <- function(string_a_buscar,vec){
i_corrige <- grep(string_a_buscar, vec)
if(length(i_corrige)>0) {
aux <- vec
for(ii in 1:length(i_corrige)){
aux[i_corrige[ii]-1] <- paste(vec[i_corrige[ii]-1],
vec[i_corrige[ii]],collapse = "")
}
aux <- aux[-i_corrige]
vec <- aux
}
return(vec)
}
extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143")
View(extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/143"))
View(extrae_info_1_pag("http://www.fciencias.unam.mx/docencia/horarios/20182/2017/1541"))
39.52/60
40/60
116.99/60
96.63/60
176.08/60
156.97/60
394.80/60
215.22/60
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Programs/R")
source("Fn_schedule_simulation.R")
