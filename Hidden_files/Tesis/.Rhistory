#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return Valid_crom = 1 si el cromosoma cumple todas las restricciones, 0 si no
valida_cromosoma = function(cromosoma,param){
Valid_crom = 1
Val_V = Valida_V(param)
Val_y = Valida_y(param)
Val_x = Valida_x(cromosoma,param)
#Si alguna restricción no se cumple entonces la función arroja un cero
if(Val_V == 0 || Val_y == 0 || Val_x == 0){
Valid_crom = 0}
return(Valid_crom)
}
# Función utilidad_cromosoma -----------------------------------------------
#En esta función se calcula la utilidad de cada cromosoma.
#' Title: utilidad_cromosoma
#' @param cromosoma: Matriz de "j_materias" y 4 columnas (profesor, día, horario, salón); el renglón "j" indica que la materia "j" es impartida por el profesor "i", el día "t", en el horario "h", en el salón "k"
#' @example cromosoma = matrix(c(1,9,10,11,12,1,3,5),nrow = 2,ncol = 4,byrow = TRUE)
#' @param Uit: Matriz con "i_prof" renglones y "t_dias" columnas, cuya entrada (i,t) representa la utilidad que tiene el profesor "i" de impartir en el día "t"
#' @example Uit = matrix(c(1,2,3,4),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Uji: con "j_materias" renglones y con "i_prof" columnas, cuya entrada (j,i) representa la utilidad que tiene el profesor "i" de impartir la materia "j"
#' @example Uji = matrix(c(5,6,7,8),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Ujt: Matriz con "j_materias" renglones y "k_salones" columnas, cuya entrada (j,k) representa la utilidad que tiene la materia "j" por ser impartida en el salón "k"
#' @example Ujt = matrix(c(1,9,10,11,12,1),nrow = 2,ncol = 3,byrow = TRUE)
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return El valor de la función objetivo del cromosoma que se le pasó como parámetro
utilidad_cromosoma = function(cromosoma,param){
utilidad = 0
for(j in 1:j_materias){
for (i in 1:i_prof){
for(t in 1:t_dias){
for(h in 1:h_periodos){
for(k in 1:k_salones){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
utilidad = utilidad + (Uji[j,i]*Ujt[j,t])}}}}}}
for (i in 1:i_prof){
for(t in 1:t_dias){
if(yit[i,t] == 1){
utilidad = utilidad + Uit[i,t]}}}
return(utilidad)
}
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V07/.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V09/Matrices m_grande_total/m_grande_total_20081_20201.RData")
View(m_grande_total)
View(m_grande_total)
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/.RData")
# Load required R packages
install.packages('ggpubr')
library(ggpubr)
# Ej. ---------------------------------------------------------------------
# Data preparation
df <- ToothGrowth
head(df)
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
# Create a box plot with summary table
ggsummarystats(
df, x = "dose", y = "len", add = "jitter",
color = "supp", palette = "npg",
ggfunc = ggboxplot
)
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
df
head(df)
ggboxplot(df, x = "dose", y = "len")
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "dose", y = "len", add = "jitter")
mat_calif_generaciones <- data.frame(Gen_1 = mat_calif_generaciones[,1],
Gen_2 = mat_calif_generaciones[,2],
Gen_3 = mat_calif_generaciones[,3],
Gen_4 = mat_calif_generaciones[,4],
Gen_5 = mat_calif_generaciones[,5],
Gen_6 = mat_calif_generaciones[,6])
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "Generaciones",
y = "Calificaciiones", add = "jitter")
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
y = "Calificaciiones", add = "jitter")
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
#y = "Calificaciones",
add = "jitter")
rownames(mat_calif_generaciones) <- c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6")
mat_calif_generaciones
rownames(mat_calif_generaciones) <- c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6",
"Calif_7","Calif_8","Calif_9",
"Calif_10")
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
y = c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6",
"Calif_7","Calif_8","Calif_9",
"Calif_10"),
add = "jitter")
# Ej. R documentation -----------------------------------------------------
#' https://www.rdocumentation.org/packages/ggpubr/versions/0.4.0/topics/ggboxplot
# NOT RUN {
# Load data
data("ToothGrowth")
df <- ToothGrowth
# Basic plot
# +++++++++++++++++++++++++++
# width: change box plots width
ggboxplot(df, x = "dose", y = "len", width = 0.8)
# Change orientation: horizontal
ggboxplot(df, "dose", "len", orientation = "horizontal")
# Notched box plot
ggboxplot(df, x = "dose", y = "len",
notch = TRUE)
# Add dots
# ++++++++++++++++++++++++++
ggboxplot(df, x = "dose", y = "len",
add = "dotplot")
# Add jitter points and change the shape by groups
ggboxplot(df, x = "dose", y = "len",
add = "jitter", shape = "dose")
# Select which items to display: "0.5" and "2"
ggboxplot(df, "dose", "len",
select = c("0.5", "2"))
head(https://www.rdocumentation.org/packages/ggpubr/versions/0.4.0/topics/ggboxplot)
head(df)
# Ej. con datos tesis -----------------------------------------------------
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
mat_calif_generaciones <- data.frame(Gen_1 = mat_calif_generaciones[,1],
Gen_2 = mat_calif_generaciones[,2],
Gen_3 = mat_calif_generaciones[,3],
Gen_4 = mat_calif_generaciones[,4],
Gen_5 = mat_calif_generaciones[,5],
Gen_6 = mat_calif_generaciones[,6])
mat_calif_generaciones
dim(mat_calif_generaciones)
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = 1:dim(mat_calif_generaciones)[1],
y = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
add = "jitter")
mat_calif_generaciones <- data.frame(Gen1 = mat_calif_generaciones[,1],
Gen2 = mat_calif_generaciones[,2],
Gen3 = mat_calif_generaciones[,3],
Gen4 = mat_calif_generaciones[,4],
Gen5 = mat_calif_generaciones[,5],
Gen6 = mat_calif_generaciones[,6])
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = 1:dim(mat_calif_generaciones)[1],
y = c("Gen1","Gen2","Gen3",
"Gen4","Gen5","Gen6"),
add = "jitter")
# Change colors
# +++++++++++++++++++++++++++
# Change outline and fill colors
ggboxplot(df, "dose", "len",
color = "black", fill = "gray")
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
ggboxplot(df, "dose", "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
# Change fill color by groups: dose
ggboxplot(df, "dose", "len",
fill = "dose", palette = c("#00AFBB", "#E7B800", "#FC4E07"))
# Box plot with multiple groups
# +++++++++++++++++++++
# fill or color box plot by a second group : "supp"
ggboxplot(df, "dose", "len", color = "supp",
palette = c("#00AFBB", "#E7B800"))
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
ggboxplot(df, "dose", "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
head(df)
1:dim(mat_calif_generaciones)[1]
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = min(mat_calif_generaciones):max(mat_calif_generaciones),
y = c("Gen1","Gen2","Gen3",
"Gen4","Gen5","Gen6"),
add = "jitter")
min(mat_calif_generaciones)
max(mat_calif_generaciones)
length(min(mat_calif_generaciones):max(mat_calif_generaciones))
head(df)
boxplot(mat_calif_generaciones[,1])
# Ej. con datos tesis -----------------------------------------------------
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
rep(c(1:6),10)
sort(rep(c(1:6),10))
length(mat_calif_generaciones[,1])
dim(mat_calif_generaciones)
sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1]))
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
df_calif_gen
dim(df_calif_gen)
dim(mat_calif_generaciones)
k <- 1
(1*(k-1)):(10*(k-1))
(1+(k-1)):(10+(k-1))
k <- 2
(1+(k-1)):(10+(k-1))
(k+(k-1)):((10*k)+(k-1))
(1+(k-1)):(10+(k-1)) #1:10
k <- 1
(1+(k-1)):(10+(k-1)) #1:10 k <- 1
vec <- (1+(k-1)):(10+(k-1)) #1:10 k <- 1
k
k <- 2
k*vec
k
(10*(k-1))+vec
k <- 3
(10*(k-1))+vec
k <- 1
(10*(k-1))+vec
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec] <- mat_calif_generaciones[,k]
}
df_calif_gen
1:dim(mat_calif_generaciones)[2]
mat_calif_generaciones
k
mat_calif_generaciones[,k]
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec,1]
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
df_calif_gen
vec
k
source('C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/ejemplo_funcion_ggboxplot.R')
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
cat("k = ", k,"\n vec = ",vec)
# df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
cat("\nk = ", k,"\n\n vec = ",vec)
# df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
k <- 1
(1+(k-1)):(10+(k-1))
vec <- (1+(k-1)):(10+(k-1))
k
(10*(k-1))+vec
k <- 2
(10*(k-1))+1:10
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+1:10
# cat("\nk = ", k,"\n\n vec = ",vec)
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
df_calif_gen
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "Generaciones",
y = "Calificaciones",
add = "jitter")
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",
y = "Calificaciones",
add = "jitter")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
# Figura ------------------------------------------------------------------
#' Se cargan los datos
load("Programas/Figuras PDF/fig_num_alum_sem_par_impar_Proba_I/mat_alum_sem_impar_proba_I.Rdata")
load("Programas/Figuras PDF/fig_num_alum_sem_par_impar_Proba_I/mat_alum_sem_par_proba_I.Rdata")
load("Programas/Figuras PDF/fig_num_alum_sem_par_impar_Proba_I/mat_alum_x_sem_proba_I.Rdata")
#' Se convierten los datos en serie de tiempo
alum_sem_impar.ts <- ts(mat_alum_sem_impar_proba_I[,2],frequency = 1,
start = c(2015, 1))
alum_sem_impar.ts
min(alum_sem_impar.ts)#682
max(alum_sem_impar.ts)#944
alum_sem_par.ts <- ts(mat_alum_sem_par_proba_I[,2],frequency = 1,
start = c(2015, 1))
alum_sem_par.ts
min(alum_sem_par.ts)#366
max(alum_sem_par.ts)#528
alum_sem_par_impar.ts <- ts(mat_alum_x_sem_proba_I[,2],frequency = 2,
start = c(2015, 1))
alum_sem_par_impar.ts
min(alum_sem_par_impar.ts)#366
max(alum_sem_par_impar.ts)#944
## Se grafica la serie de tiempo
semestres <- mat_alum_x_sem_proba_I[,1]
sem_impar <- mat_alum_sem_impar_proba_I[,1]
sem_par <- mat_alum_sem_par_proba_I[,1]
#Varianza y sd
# var(alum_sem_impar.ts)
# sd(alum_sem_impar.ts)
# var(alum_sem_par.ts)
# sd(alum_sem_par.ts)
# plot --------------------------------------------------------------------
plot(semestres,alum_sem_par_impar.ts,ylim=c(0,1000),main = "Probabilidad I",
type="n",xlab="Semestres",ylab="Número de alumnos",axes = FALSE)
points(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea,pch="o")
lines(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea)
sem_par_aux <- c("20155","20165","20175","20185","20195")
points(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea,pch="o")
lines(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea)
axis(side=1, at = c(20150,20160,20170,20180,20190,20200),
labels=c("2015-1","2016-1","2017-1","2018-1","2019-1","2020-1"))
axis(2)
box() #- To make it look like "usual" plot
legend(20155,400,c("Número de alumnos de semestres impares",
"Número de alumnos de semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),
pch=c("o","o"),lty=c(1,1),#cex=1.1
)
# param_graficas ----------------------------------------------------------
param_graficas <- list()
# param_graficas$color_barras = rgb(91,155,213)##Azul como excel
# param_graficas$col_barras = '#5b9bd5' ##Azul como excel
param_graficas$col_barras = "skyblue" ##Azul cielo
# param_graficas$col1_hist = rgb(0,0,1,1/4)##Azul histogramas
param_graficas$col1_hist = "skyblue" ##Azul cielo histogramas
param_graficas$col2_hist = rgb(1,0,0,1/4)##Rojo histogramas
param_graficas$col3_hist = "purple" ##Morado histogramas
param_graficas$col4_hist = "magenta" ##Magenta histogramas
param_graficas$col5_hist = "limegreen" ##Verde histogramas
# param_graficas$col5_hist = "green" ##Verde histogramas
param_graficas$col1_linea = "blue" ##Azul densidad
param_graficas$col2_linea = "red" ##Rojo densidad
param_graficas$col3_linea = "purple" ##Morado densidad
param_graficas$lwd_dens = 6 #Ancho de línea para densidad ajustada
param_graficas$ancho_pdf = 8 #Anchura para guardar imagen
param_graficas$altura_pdf = 6 #Altura para guardar imagen
param_graficas$dir_TeX = "TeX/LaTeX/Pictures/"
# demo(graphics) # Ejecútela usted
# dev.off()#Para salir de la función par()
# plot --------------------------------------------------------------------
plot(semestres,alum_sem_par_impar.ts,ylim=c(0,1000),main = "Probabilidad I",
type="n",xlab="Semestres",ylab="Número de alumnos",axes = FALSE)
points(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea,pch="o")
lines(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea)
sem_par_aux <- c("20155","20165","20175","20185","20195")
points(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea,pch="o")
lines(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea)
axis(side=1, at = c(20150,20160,20170,20180,20190,20200),
labels=c("2015-1","2016-1","2017-1","2018-1","2019-1","2020-1"))
axis(2)
box() #- To make it look like "usual" plot
legend(20155,400,c("Número de alumnos de semestres impares",
"Número de alumnos de semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),
pch=c("o","o"),lty=c(1,1),#cex=1.1
)
# plot --------------------------------------------------------------------
plot(semestres,alum_sem_par_impar.ts,ylim=c(0,1000),
main = "Número de alumnos por tipo de semestre en Probabilidad I",
type="n",xlab="Semestres",ylab="Número de alumnos",axes = FALSE)
points(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea,pch="o")
lines(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea)
sem_par_aux <- c("20155","20165","20175","20185","20195")
points(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea,pch="o")
lines(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea)
axis(side=1, at = c(20150,20160,20170,20180,20190,20200),
labels=c("2015-1","2016-1","2017-1","2018-1","2019-1","2020-1"))
axis(2)
box() #- To make it look like "usual" plot
legend(20155,400,c("Número de alumnos de semestres impares",
"Número de alumnos de semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),
pch=c("o","o"),lty=c(1,1),#cex=1.1
)
# plot --------------------------------------------------------------------
plot(semestres,alum_sem_par_impar.ts,ylim=c(0,1000),
main = "Probabilidad I semestres pares e impares",
type="n",xlab="Semestres",ylab="Número de alumnos",axes = FALSE)
points(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea,pch="o")
lines(sem_impar, alum_sem_impar.ts, col=param_graficas$col1_linea)
sem_par_aux <- c("20155","20165","20175","20185","20195")
points(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea,pch="o")
lines(sem_par_aux, alum_sem_par.ts, col=param_graficas$col2_linea)
axis(side=1, at = c(20150,20160,20170,20180,20190,20200),
labels=c("2015-1","2016-1","2017-1","2018-1","2019-1","2020-1"))
axis(2)
box() #- To make it look like "usual" plot
legend(20155,400,c("Número de alumnos de semestres impares",
"Número de alumnos de semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),
pch=c("o","o"),lty=c(1,1),#cex=1.1
)
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "num_alum_sem_par_impar_Proba_I.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
# Figura ------------------------------------------------------------------
#' Se cargan los datos del semestre 2008-1 al 2020-1 del promedio de
#' alumnos por semestre y de la desviación estándar.
load("Programas/Figuras PDF/fig_histograma_FR_num_alum_sem_par_impar_Proba_I/vec_alum_x_gpo_par_proba_I.Rdata")
load("Programas/Figuras PDF/fig_histograma_FR_num_alum_sem_par_impar_Proba_I/vec_alum_x_gpo_impar_proba_I.Rdata")
# Histograma doble --------------------------------------------------------
min(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
max(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
hist(vec_alum_x_gpo_impar_proba_I, col=param_graficas$col1_hist,
breaks = seq(0,200,by = 10),freq = F,ylim=c(0,0.02),
ylab = "Frecuencia relativa",xlab = "Número alumnos",
# ylab = "Densidad",xlab = "Número alumnos",
main="Probabilidad I semestres par e impar")
lines(density(vec_alum_x_gpo_impar_proba_I),col=param_graficas$col1_linea,
lwd=param_graficas$lwd_dens)
hist(vec_alum_x_gpo_par_proba_I,col=param_graficas$col2_hist,
breaks = seq(0,200,by = 10),freq = F,add=TRUE)
lines(density(vec_alum_x_gpo_par_proba_I),col=param_graficas$col2_linea,
lwd=param_graficas$lwd_dens)
legend(130,0.02,c("Semestres impares","Semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),lty=c(1,1),
cex=1.1,lwd=param_graficas$lwd_dens)
# Histograma doble --------------------------------------------------------
min(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
max(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
hist(vec_alum_x_gpo_impar_proba_I, col=param_graficas$col1_hist,
breaks = seq(0,200,by = 10),freq = F,ylim=c(0,0.02),
ylab = "Frecuencia relativa",xlab = "Número alumnos",
# ylab = "Densidad",xlab = "Número alumnos",
main="Probabilidad I semestres pares e impares")
lines(density(vec_alum_x_gpo_impar_proba_I),col=param_graficas$col1_linea,
lwd=param_graficas$lwd_dens)
hist(vec_alum_x_gpo_par_proba_I,col=param_graficas$col2_hist,
breaks = seq(0,200,by = 10),freq = F,add=TRUE)
lines(density(vec_alum_x_gpo_par_proba_I),col=param_graficas$col2_linea,
lwd=param_graficas$lwd_dens)
legend(130,0.02,c("Semestres impares","Semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),lty=c(1,1),
cex=1.1,lwd=param_graficas$lwd_dens)
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "histograma_FR_num_alum_sem_par_impar_Proba_I.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Histograma doble --------------------------------------------------------
min(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
max(c(vec_alum_x_gpo_impar_proba_I,vec_alum_x_gpo_par_proba_I))
hist(vec_alum_x_gpo_impar_proba_I, col=param_graficas$col1_hist,
breaks = seq(0,200,by = 10),freq = F,ylim=c(0,0.02),
ylab = "Frecuencia relativa",xlab = "Número alumnos",
# ylab = "Densidad",xlab = "Número alumnos",
main="Probabilidad I semestres pares e impares")
lines(density(vec_alum_x_gpo_impar_proba_I),col=param_graficas$col1_linea,
lwd=param_graficas$lwd_dens)
hist(vec_alum_x_gpo_par_proba_I,col=param_graficas$col2_hist,
breaks = seq(0,200,by = 10),freq = F,add=TRUE)
lines(density(vec_alum_x_gpo_par_proba_I),col=param_graficas$col2_linea,
lwd=param_graficas$lwd_dens)
legend(130,0.02,c("Semestres impares","Semestres pares"),bty = "n",
col=c(param_graficas$col1_linea,param_graficas$col2_linea),lty=c(1,1),
#cex=1.1,
lwd=param_graficas$lwd_dens)
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "histograma_FR_num_alum_sem_par_impar_Proba_I.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
