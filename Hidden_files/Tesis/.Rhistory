# calif_mejor_elem[g] <- mat_calif_asig[tam_poblacion,2]
# plot(calif_mejor_elem[1:g],main = "Calificaciones del mejor elemento",
#      xlab = "Generación",ylab = "Calificación")
# mat_calif_generaciones[,g] <- mat_calif_asig[,2]
# matplot(mat_calif_generaciones[,1:g],type = "l",
#         main = "Calificaciones de las asignaciones por generación",
#         xlab = "Asignaciones",ylab = "Calificaciones")
# save(calif_mejor_elem,file = "calif_mejor_elem.RData")
# save(mat_calif_generaciones,file = "mat_calif_generaciones.RData")
# ptm_pob <- proc.time()# Start the clock!
for(n in 1:tam_poblacion){
cat("\n *** HIJO ",n," ***")
if(n == 1){poblacion_nueva <- list()}
hijo <- data.frame(Materia = 0, Profesor = 0,TC = 0,
Horario = 0)
esq_hijo <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
### 4) Elegir 2 padres con prob = 2i/(n*(n+1))
#' La selección es por "Rank Selection":
#' a) Elegir 2 individuos aleatoriamente
#' b) La asignación con la calificación más alta es el padre 1
#' c) Repetir a) y b) para el padre 2
#' Nota: Se toman los índices y no los números de las asignaciones
#' porque se tiene el vector de probabilidades que depende de
#' la posición en la que se encuentren las asignaciones.
ind_padres <- c(0,0)
(ind_mat_1 <- sample(x = 1:tam_poblacion,size = 2,
prob = vec_prob_asig))
ind_padres[1] <- max(ind_mat_1)
(ind_mat_2 <- sample(x = 1:tam_poblacion,size = 2,
prob = vec_prob_asig))
ind_padres[2] <- max(ind_mat_2)
padre_1 <- poblacion[[ind_padres[1]]]
padre_2 <- poblacion[[ind_padres[2]]]
while(dim(padre_1)[1]!=0 && dim(padre_2)[1]!=0){
# Repetir hasta que uno de los padres se quede sin genes.
### 5) Con prob = 0.5 se elige un padre
(ind_padre_elegido <- sample(x=1:2,size = 1))
cat("\n Se eligió al padre ",ind_padre_elegido)
if(ind_padre_elegido == 1){
padre_elegido <- padre_1
}else{
padre_elegido <- padre_2
}
### 6) Elegir un gen (grupo) del padre seleccionado con prob = 2i/(n*(n+1))
(num_genes <- dim(padre_elegido)[1])
vec_prob_genes <- (2*(1:num_genes))/(num_genes*(num_genes+1))
(ind_gen <- sample(x = 1:num_genes,
size = 1,
prob = vec_prob_genes))
(gen_elegido <- padre_elegido[ind_gen,1:4])
### 7) Mutación
(r_num_muta <- runif(1))
if(r_num_muta < prob_mutacion){
cat("\n Entra a mutación")
(gen_elegido <- elige_gen_de_solicitud(mat_solicitudes_real,
hijo,param))
}
hijo <- rbind(hijo,gen_elegido)
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen] + 1
### 8) Ajustar información de los padres con respecto al nuevo
###gen del hijo
# (num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
# num_max_gpos[2,num_materia_gen] <- num_max_gpos[2,num_materia_gen] + 1
lista_padres <- ajusta_genes_padres(esq_hijo,padre_1,padre_2,
gen_elegido,mat_esqueleto_cotas)
padre_1 <- lista_padres[[1]]
padre_2 <- lista_padres[[2]]
}#Fin while()
#' Quitamos el renglón de ceros inicial
hijo <- unique(hijo)#Para evitar repeticiones en los grupos
hijo <- hijo %>% filter(Profesor != 0)
### 9) Añadir los genes restantes del otro padre al hijo
if(dim(padre_1)[1] > 0){hijo <- rbind(hijo,padre_1[,1:4])}
if(dim(padre_2)[1] > 0){hijo <- rbind(hijo,padre_2[,1:4])}
### 2) Calificar y 3) Ordenar las calificaciones del hijo
# esq_hijo <- gen_esq_hijo(hijo,param)#Grupos con profesor en el hijo
lista_hijo <- list(hijo,esq_hijo)
lista_calif_hijo <- califica_asignacion(mat_esqueleto,
mat_solicitudes_real,
lista_hijo,param)
poblacion_nueva[[n]] <- lista_calif_hijo
}#Fin for(n)
# cat("\nEl ciclo tardó: ",(proc.time()-ptm_pob)[3]/60,
#     " minutos. Para 1 generación \n")#15/37.83min
lista_info <- califica_ordena_asig(poblacion_nueva,param)
mat_calif_asig <- lista_info[[1]]
poblacion <- lista_info[[2]]
### 12) Guardar una matriz con la calificación x gpo. de las
#' asignaciones (como xiii de T45)
matrices_calif_x_generacion[[(g+1)]] <- lista_info[[3]]
### 13) Hacer heatmap de la matriz en 12)
heatmap(matrices_calif_x_generacion[[(g+1)]][,1:650],
Colv = NA, Rowv = NA,
main = paste0("Calificaciones ordenadas de generación ",g+1),
scale="none",col=colMain)
### 11) Guardar la mejor asignación de la generación
ind_mejor_asig <- mat_calif_asig[tam_poblacion,1]
mejores_asig[[(g+1)]] <- list(mat_calif_asig,
poblacion[[ind_mejor_asig]])
#Graficar datos
calif_mejor_elem[(g+1)] <- mat_calif_asig[tam_poblacion,2]
plot(calif_mejor_elem[1:(g+1)],
main = "Calificaciones del mejor elemento",
xlab = "Generación",ylab = "Calificación")
mat_calif_generaciones[,(g+1)] <- mat_calif_asig[,2]
matplot(mat_calif_generaciones[,1:(g+1)],type = "l",
main = "Calificaciones de las asignaciones por generación",
xlab = "Asignaciones",ylab = "Calificaciones")
}#Fin for(g)
cat("\nEl ciclo tardó: ",(proc.time()-ptm)[3]/60,
" minutos. Para ",num_generaciones," generaciones \n")
# View(matrices_calif_x_generacion)
# View(mejores_asig)
# View(mejores_asig[[num_generaciones]])
# View(mejores_asig[[num_generaciones]][[1]])
# View(mejores_asig[[num_generaciones]][[2]])
# View(mejores_asig[[1]][[1]])
mejores_asig[[1]][[1]]
mejores_asig[[2]][[1]]
mejores_asig[[3]][[1]]
mejores_asig[[4]][[1]]
mejores_asig[[5]][[1]]
mejores_asig[[6]][[1]]
### 14) Se define la asignación final
mejor_asig <- mejores_asig[[(num_generaciones+1)]][[2]]
mat_asignacion_final <- cbind(mejor_asig$Materia,
mejor_asig$Profesor,
mejor_asig$Horario)
colnames(mat_asignacion_final) <- c("Materia","Profesor","Horario")
View(mat_asignacion_final)
# View(mat_asignacion_final)
save(mat_asignacion_final,file = "mat_asignacion_final.RData")
list_asignacion_final <- list()
list_asignacion_final[[1]] <- mat_asignacion_final
list_asignacion_final[[2]] <- calif_mejor_elem #Vector con calificaciones
#de los mejores elementos por generación
list_asignacion_final[[3]] <- mat_calif_generaciones #Matriz con
#calificaciones de todos los elementos de todas las generaciones
list_asignacion_final[[4]] <- matrices_calif_x_generacion #Lista de
#' tamaño num_generaciones+1 con las matrices de calificaciones ordenadas
#' por generación .
list_asignacion_final[[5]] <- mejores_asig #Lista de tamaño
#' num_generaciones+1 con la información de los mejores hijos de
#' cada generación.
names(list_asignacion_final) <- c("mat_asignacion_final",
"calif_mejor_elem",
"mat_calif_generaciones",
"matrices_calif_x_generacion",
"mejores_asig")
xtable(mat_asignacion_final[order(mat_asignacion_final[,1],
as.numeric(mat_asignacion_final[,3])),])
calif_mejor_elem
save(calif_mejor_elem,file = "calif_mejor_elem.RData")
mat_calif_generaciones
# save(calif_mejor_elem,file = "calif_mejor_elem.RData")
save(mat_calif_generaciones,file = "mat_calif_generaciones.RData")
save(calif_mejor_elem,file = "calif_mejor_elem.RData")
calif_mejor_elem
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos/calif_mejor_elem.RData")
# Figura ------------------------------------------------------------------
plot(calif_mejor_elem,main = "Calificaciones del mejor elemento",
xlab = "Generación",ylab = "Calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "calif_mejores_hijos.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_asig_x_generacion/mat_calif_generaciones.RData")
# Figura ------------------------------------------------------------------
matplot(mat_calif_generaciones,type = "l",
main = "Calificaciones de las asignaciones por generación",
xlab = "Asignaciones",ylab = "Calificaciones")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "calif_asig_x_generacion.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal")
source("Fn_Asignacion.R")
### Obtener D
D_inicial <- gen_mat_demanda_alumnos(param,param_sim)#42.96 seg
#' Definimos las listas en las que vamos a guardar el número de alumnos
#' por materia
num_alum_x_materia <- list()
num_alum_x_materia[[1]] <- colSums(D_inicial)
D <- D_inicial
##Convertimos los datos para obtener la distribución por horas
wait_alumnos <- 0
Horas <- param$Horas
for(h in 1:length(Horas)){
suma_x_hra <- sum(D[h,])
if(suma_x_hra > 0){
wait_alumnos <- c(wait_alumnos,rep(Horas[h],suma_x_hra))
}
}
#Quitamos el cero inicial
wait_alumnos <- wait_alumnos[-1]
#' Definimos la lista en las que vamos a guardar el número de alumnos
#' por materia
num_alum_x_materia <- list()
num_alum_x_materia[[1]] <- colSums(D)
mixmdl_1_D <- normalmixEM(wait_alumnos,k = 4)#Modelo inicial
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = "blue")
legend(15,0.14,c("GMM","density()"),bty = "n",
col=c("blue","green"),lty=c(1,1),
cex=1.1,lwd=2)
save(wait_alumnos,file = "wait_alumnos.RData")
#Hacemos "n_rep" veces el proceso
for(d in 2:n_rep){
cat("d = ",d)
### Obtener D
D <- gen_mat_demanda_alumnos(param,param_sim)
num_alum_x_materia[[d]] <- colSums(D)
##Convertimos los datos para obtener la distribución por horas
for(h in 1:length(Horas)){
suma_x_hra <- sum(D[h,])
if(suma_x_hra > 0){
wait_alumnos <- c(wait_alumnos,rep(Horas[h],suma_x_hra))
}
}
}#2.7805 min
n_rep <- 5
#Hacemos "n_rep" veces el proceso
for(d in 2:n_rep){
cat("d = ",d)
### Obtener D
D <- gen_mat_demanda_alumnos(param,param_sim)
num_alum_x_materia[[d]] <- colSums(D)
##Convertimos los datos para obtener la distribución por horas
for(h in 1:length(Horas)){
suma_x_hra <- sum(D[h,])
if(suma_x_hra > 0){
wait_alumnos <- c(wait_alumnos,rep(Horas[h],suma_x_hra))
}
}
}#2.7805 min
mixmdl_D <- normalmixEM(wait_alumnos,mixmdl_1_D$mu)#Modelo final
wait_alumnos_final <- wait_alumnos
save(wait_alumnos_final,file = "wait_alumnos_final.RData")
hist(wait_alumnos_final,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_D$mu,sd = mixmdl_D$sigma)),
lty=1,lwd=2,col = "blue")
legend(15,0.12,c("GMM","density()"),bty = "n",
col=c("blue","green"),lty=c(1,1),
cex=1.1,lwd=2)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_ini/wait_alumnos_ini.RData")
# Figura ------------------------------------------------------------------
mixmdl_1_D <- normalmixEM(wait_alumnos,k = 4)#Modelo inicial
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = "blue")
lines(density(wait_alumnos), lty=1,lwd=2,col = "green")
legend(15,0.14,c("GMM","density()"),bty = "n",
col=c("blue","green"),lty=c(1,1),
cex=1.1,lwd=2)
mixmdl_6_D <- normalmixEM(wait_alumnos,k = 6)#Modelo inicial
mixmdl_6_D <- normalmixEM(wait_alumnos,mu = c(8,10,14,16,18,20))#Modelo inicial
mixmdl_5_D <- normalmixEM(wait_alumnos,mu = c(8,10,14,16,18))#Modelo inicial
mixmdl_1_D$mu
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(15,0.14,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
legend(9,0.14,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.14,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.15,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.14,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
save(mixmdl_1_D,file = "mixmdl_1_D.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/Figuras PDF/fig_gmm_alum_fin/wait_alumnos_fin.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/Figuras PDF/fig_gmm_alum_fin/mixmdl_1_D.RData")
mixmdl_1_D
mixmdl_1_D$mu
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "gmm_alum_ini.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_ini/wait_alumnos_fin.RData")
load("Programas/Figuras PDF/fig_gmm_alum_ini/mixmdl_1_D.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_fin/wait_alumnos_fin.RData")
load("Programas/Figuras PDF/fig_gmm_alum_fin/mixmdl_1_D.RData")
mixmdl_1_D$mu
# Modelo GMM --------------------------------------------------------------
mixmdl_D <- normalmixEM(wait_alumnos_fin,mixmdl_1_D$mu)#Modelo final
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_fin/wait_alumnos_fin.RData")
load("Programas/Figuras PDF/fig_gmm_alum_fin/mixmdl_1_D.RData")
wait_alumnos_fin
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/Figuras PDF/fig_gmm_alum_fin/wait_alumnos_fin.RData")
wait_alumnos_fin
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_ini/wait_alumnos.RData")
# Modelo GMM --------------------------------------------------------------
mixmdl_1_D <- normalmixEM(wait_alumnos,k = 4)#Modelo inicial
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),)
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora")
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora",
ylab = "Frecuencia reativa",
xlab = "Número de alumnos esperados para el 2020-1")
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora",
ylab = "Frecuencia reativa",
xlab = "Número de alumnos esperados para el 2020-1")
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo inicial de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_ini/wait_alumnos.RData")
# Modelo GMM --------------------------------------------------------------
mixmdl_1_D <- normalmixEM(wait_alumnos,k = 4)#Modelo inicial
# Figura ------------------------------------------------------------------
hist(wait_alumnos,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora",
ylab = "Frecuencia reativa",
xlab = "Número de alumnos esperados para el 2020-1")
lines(density(rnorm(1000,mean = mixmdl_1_D$mu,sd = mixmdl_1_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo inicial de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "gmm_alum_ini.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_alum_fin/wait_alumnos_final.RData")
load("Programas/Figuras PDF/fig_gmm_alum_fin/mixmdl_1_D.RData")
# Modelo GMM --------------------------------------------------------------
mixmdl_D <- normalmixEM(wait_alumnos_final,mixmdl_1_D$mu)#Modelo final
# Figura ------------------------------------------------------------------
hist(wait_alumnos_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora",
ylab = "Frecuencia reativa",
xlab = "Número de alumnos esperados para el 2020-1")
lines(density(rnorm(1000,mean = mixmdl_D$mu,sd = mixmdl_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo inicial de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_alumnos_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de la demanda de alumnos por hora",
ylab = "Frecuencia reativa",
xlab = "Número de alumnos esperados para el 2020-1")
lines(density(rnorm(1000,mean = mixmdl_D$mu,sd = mixmdl_D$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.145,"Modelo final de mezcla de normales",bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
cex=1.1,lwd=2)
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "gmm_alum_fin.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
mixmdl_1_D$mu
mixmdl_1_D$sigma)
mixmdl_1_D$sigma
# Ej. datos tesis ---------------------------------------------------------
#' Se cargan los datos del semestre 2008-1 al 2020-1 del promedio de
#' alumnos por semestre
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/Figuras PDF/fig_prom_alum_total_x_sem_ts/vec_prom_total_alum.RData")
vec_prom_total_alum
cox.stuart.test(vec_prom_total_alum)
