#' Nota: Se toman los índices y no los números de las asignaciones
#' porque se tiene el vector de probabilidades que depende de
#' la posición en la que se encuentren las asignaciones.
ind_padres <- c(0,0)
(ind_mat_1 <- sample(x = 1:tam_poblacion,size = 2,
prob = vec_prob_asig))
(ind_padres[1] <- max(ind_mat_1))
(ind_mat_2 <- sample(x = 1:tam_poblacion,size = 2,
prob = vec_prob_asig))
#' Para no tener al mismo padre dos veces
while(max(ind_mat_2) == max(ind_mat_1)){
(ind_mat_2 <- sample(x = 1:tam_poblacion,size = 2,
prob = vec_prob_asig))
# cat("\n max(ind_mat_1) = ",max(ind_mat_1))
# cat("\n max(ind_mat_2) = ",max(ind_mat_2))
}
(ind_padres[2] <- max(ind_mat_2))
padre_1 <- poblacion[[ind_padres[1]]]
padre_2 <- poblacion[[ind_padres[2]]]
# write.csv(poblacion[[ind_padres[1]]], file = "padre_1.csv")
# write.csv(poblacion[[ind_padres[2]]], file = "padre_2.csv")
while(dim(padre_1)[1]!=0 && dim(padre_2)[1]!=0){
# Repetir hasta que uno de los padres se quede sin genes.
### 5) Con prob = 0.5 se elige un padre
(ind_padre_elegido <- sample(x=1:2,size = 1))
cat("\n Se eligió al padre ",ind_padre_elegido)
# cat(paste("Se eligió al padre ",ind_padre_elegido),
#     file="outfile.txt",sep="\n",append=TRUE)
if(ind_padre_elegido == 1){
padre_elegido <- padre_1
}else{
padre_elegido <- padre_2
}
### 6) Elegir un gen (grupo) del padre seleccionado con prob = 2i/(n*(n+1))
(num_genes <- dim(padre_elegido)[1])
vec_prob_genes <- (2*(1:num_genes))/(num_genes*(num_genes+1))
(ind_gen <- sample(x = 1:num_genes,
size = 1,
prob = vec_prob_genes))
(gen_elegido <- padre_elegido[ind_gen,1:4])
### 7) Mutación
(r_num_muta <- runif(1))
if(r_num_muta<prob_mutacion && dim(mat_solicitudes_restantes)[1]>0){
#La 2° condición verifica si aún hay solicitudes para elegir
cat("\n Entra a mutación")
cat("\n dim(mat_solicitudes_restantes)[1] = ",
dim(mat_solicitudes_restantes)[1])
# cat("Entra a mutación",file="outfile.txt",sep="\n",append=TRUE)
(gen_elegido <- elige_gen_de_solicitud(mat_solicitudes_restantes,
hijo,param))
}
if(r_num_muta<prob_mutacion && dim(mat_solicitudes_restantes)[1]==0){
#La 2° condición verifica que ya no hay solicitudes para elegir
cat("\n*** La matriz mat_solicitudes_restantes, ya no tiene información ***")
cat("\n*** g = ",g," ***")
cat("\n*** hijo = ",n," ***")
}
if(dim(gen_elegido)[1]==0 || is.na(gen_elegido[1])){
#' Cuando la matriz de solicitudes restantes tiene pocos
#' grupos se arroja un gen lleno de NA's
cat("\n Entra al if de *emergencia*")
(gen_elegido <- padre_elegido[ind_gen,1:4])
}
hijo <- rbind(hijo,gen_elegido)
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen] + 1
#' Se ajusta la información de las solicitudes
mat_solicitudes_restantes <- ajusta_mat_solicitudes(
mat_solicitudes_restantes,gen_elegido)
### 8) Ajustar información de los padres con respecto al nuevo
###gen del hijo
# (num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
# num_max_gpos[2,num_materia_gen] <- num_max_gpos[2,num_materia_gen] + 1
lista_padres <- ajusta_genes_padres(esq_hijo,padre_1,padre_2,
gen_elegido,mat_esqueleto)
# lista_padres <- ajusta_genes_padres(esq_hijo,padre_1,padre_2,
#                                     gen_elegido,mat_esqueleto_cotas)
padre_1 <- lista_padres[[1]]
padre_2 <- lista_padres[[2]]
}#Fin while()
#' Quitamos el renglón de ceros inicial
hijo <- unique(hijo)#Para evitar repeticiones en los grupos
hijo <- hijo %>% filter(Profesor != 0)
### 9) Añadir los genes restantes del otro padre al hijo
if(dim(padre_1)[1] > 0){
for(i in 1:dim(padre_1)[1]){
gen_elegido <- padre_1[i,]
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen]+1
}
hijo <- rbind(hijo,padre_1[,1:4])
}
if(dim(padre_2)[1] > 0){
for(i in 1:dim(padre_2)[1]){
gen_elegido <- padre_2[i,]
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen]+1
}
hijo <- rbind(hijo,padre_2[,1:4])
}
#' Se asignan profesores a los grupos faltantes, como la
#' población inicial.
esq_gpos_faltantes <- mat_esqueleto - esq_hijo
lista_asig <- gen_asignacion(esq_gpos_faltantes,
mat_solicitudes_restantes,
param)#12.78 seg
mat_asig <- lista_asig[[1]]
hijo <- rbind(hijo,mat_asig)
### 2) Calificar y 3) Ordenar las calificaciones del hijo
# esq_hijo <- gen_esq_hijo(hijo,param)#Grupos con profesor en el hijo
lista_hijo <- list(hijo,esq_hijo)
lista_calif_hijo <- califica_asignacion(mat_esqueleto,
mat_solicitudes_real,
lista_hijo,param)
poblacion_nueva[[n]] <- lista_calif_hijo
#Cada hijo vuelve a iniciar con la matriz de solicitudes completa
mat_solicitudes_restantes <- mat_solicitudes_real#1886 5
}#Fin for(n)
# cat("\nEl ciclo tardó: ",(proc.time()-ptm_pob)[3]/60,
#     " minutos. Para 1 generación \n")#15/37.83min
lista_info <- califica_ordena_asig(poblacion_nueva,param)
mat_calif_asig <- lista_info[[1]]
poblacion <- lista_info[[2]]
for (p in 1:tam_poblacion) {
mat_num_genes[p,(g+1)] <- dim(poblacion[[p]])[1]
}
# save(mat_num_genes,file = "mat_num_genes.RData")
### 12) Guardar una matriz con la calificación x gpo. de las
#' asignaciones (como xiii de T45)
matrices_calif_x_generacion[[(g+1)]] <- lista_info[[3]]
### 13) Hacer heatmap de la matriz en 12)
heatmap(matrices_calif_x_generacion[[(g+1)]][,1:650],
Colv = NA, Rowv = NA,
main = paste0("Calificaciones ordenadas de generación ",g+1),
scale="none",col=colMain)
### 11) Guardar la mejor asignación de la generación
ind_mejor_asig <- mat_calif_asig[tam_poblacion,1]
mejores_asig[[(g+1)]] <- list(mat_calif_asig,
poblacion[[ind_mejor_asig]])
#Graficar datos
calif_mejor_elem[(g+1)] <- mat_calif_asig[tam_poblacion,2]
plot(calif_mejor_elem[1:(g+1)],
main = "Calificaciones del mejor elemento",
xlab = "Generación",ylab = "Calificación")
mat_calif_generaciones[,(g+1)] <- mat_calif_asig[,2]
matplot(mat_calif_generaciones[,1:(g+1)],type = "l",
main = "Calificaciones de las asignaciones por generación",
xlab = "Asignaciones",ylab = "Calificaciones")
matplot(mat_num_genes[,1:(g+1)],type = "l",
main = "Número de genes por generación",
xlab = "Asignaciones",ylab = "Número de genes")
}#Fin for(g)
cat("\nEl ciclo tardó: ",(proc.time()-ptm_generaciones)[3]/60,
" minutos. Para ",num_generaciones," generaciones \n")
### 14) Se define la asignación final
mejor_asig <- mejores_asig[[(num_generaciones+1)]][[2]]
mat_asignacion_final <- cbind(mejor_asig$Materia,
mejor_asig$Profesor,
mejor_asig$Horario)
colnames(mat_asignacion_final) <- c("Materia","Profesor","Horario")
# mat_esqueleto asignación final ------------------------------------------
esq_asig_final <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
rownames(esq_asig_final) <- param$nombre_hrs
colnames(esq_asig_final) <- param$vec_nom_materias_total
asig_final  <- data.frame(mat_asignacion_final ,Num_Materia = 0)
for(r in 1:dim(asig_final )[1]){
materia <- asig_final$Materia[r]
asig_final$Num_Materia[r] <- arroja_num_materia(materia)
}
for(m in 1:length(param$vec_nom_materias_total)){
materia <- param$vec_nom_materias_total[m]
cat("\n Materia ",m,": ",materia)
mat_materia <- asig_final  %>% filter(Materia == materia)
for(h in 1:length(param$Horas)){
hora <- param$Horas[h]
mat_hora <- mat_materia %>% filter(Horario == hora)
esq_asig_final[h,m] <- dim(mat_hora)[1]
}
}
# Info de grupos sin asignación -------------------------------------------
dif_x_materia <- colSums(mat_esqueleto) - colSums(esq_asig_final)
dif_rel <- (colSums(mat_esqueleto) - colSums(esq_asig_final))/colSums(mat_esqueleto)
info_gpos_sin_asig <- data.frame(mat_esq = colSums(mat_esqueleto),
esq_asig_fin = colSums(esq_asig_final),
gpos_sin_asig = dif_x_materia,
dif_rel = dif_rel)
mat_info_AG
# dim(mat_info_AG)
num_prueba <- 3
mat_info_AG[num_prueba,3] <- 96.63#min
mat_info_AG[num_prueba,4] <- max(calif_mejor_elem)
mat_info_AG[num_prueba,5] <- dim(mat_asignacion_final)[1]
mat_info_AG[num_prueba,6] <- calif_mejor_elem[num_generaciones+1]
mat_info_AG[num_prueba,7] <- mean(mat_num_genes[,1])
mat_info_AG[num_prueba,8] <- mean(mat_num_genes[,2:(num_generaciones+1)])
mat_info_AG
View(mat_info_AG)
# Lista 3.2 ---------------------------------------------------------------
dat_sem_20202_g06_n05_m004_U534 <- list()
dat_sem_20202_g06_n05_m004_U534[[1]] <- mat_asignacion_final
dat_sem_20202_g06_n05_m004_U534[[2]] <- calif_mejor_elem #Vector con calificaciones de los mejores elementos por generación
dat_sem_20202_g06_n05_m004_U534[[3]] <- mat_calif_generaciones #Matriz con calificaciones de todos los elementos de todas las generaciones
dat_sem_20202_g06_n05_m004_U534[[4]] <- matrices_calif_x_generacion #Lista de tamaño num_generaciones+1 con las matrices de calificaciones ordenadas por generación .
dat_sem_20202_g06_n05_m004_U534[[5]] <- mejores_asig #Lista de tamaño num_generaciones+1 con la información de los mejores hijos de cada generación.
dat_sem_20202_g06_n05_m004_U534[[6]] <- mat_num_genes #Matriz con el número de genes de todos los elementos por generación
dat_sem_20202_g06_n05_m004_U534[[7]] <- mat_esqueleto
dat_sem_20202_g06_n05_m004_U534[[8]] <- mat_solicitudes_real
dat_sem_20202_g06_n05_m004_U534[[9]] <- param
dat_sem_20202_g06_n05_m004_U534[[10]] <- mat_info_AG #Tabla con información del AG y sus resultados
dat_sem_20202_g06_n05_m004_U534[[11]] <- esq_asig_final #mat_esqueleto de la asignación final
dat_sem_20202_g06_n05_m004_U534[[12]] <- info_gpos_sin_asig #Matriz con las columnas: mat_esq (gpos. x materia en mat_esqueleto), esq_asig_fin (gpos. x materia en esq_asig_final), gpos_sin_asig (gpos. sin asignación x materia), dif_rel (diferencia relativa x materia)
names(dat_sem_20202_g06_n05_m004_U534) <- c("mat_asignacion_final",
"calif_mejor_elem",
"mat_calif_generaciones",
"matrices_calif_x_generacion",
"mejores_asig",
"mat_num_genes",
"mat_esqueleto",
"mat_solicitudes_real",
"param",
"mat_info_AG",
"esq_asig_final",
"info_gpos_sin_asig")
save(dat_sem_20202_g06_n05_m004_U534,file = "dat_sem_20202_g06_n05_m004_U-534.RData")
xtable(mat_info_AG)
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g10_n10_m004_U-514.RData")
View(dat_sem_20202_g10_n10_m004_U514)
dat_sem_20202_g10_n10_m004_U514[[6]]
mat_num_genes <- dat_sem_20202_g10_n10_m004_U514[[6]]
save(mat_num_genes,file = "mat_num_genes.RData")
# Figura: Boxplot número de genes -----------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_num_gen <- data.frame(Num_genes = 0,
Generaciones = sort(rep(c(1:dim(mat_num_genes)[2]),
dim(mat_num_genes)[1])))
for(k in 1:dim(mat_num_genes)[2]){
vec <- (dim(mat_num_genes)[1]*(k-1))+1:dim(mat_num_genes)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_num_gen[vec,1] <- mat_num_genes[,k]
}
# Create basic boxplot
ggboxplot(df_num_gen, x = "Generaciones",xlab = "Generación",
main = "                  Número de genes en asignaciones por generación",
y = "Num_genes",ylab = "Número de genes",
add = "jitter")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "boxplot_num_genes_x_generacion.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
dat_sem_20202_g10_n10_m004_U514[[3]]
mat_calif_generaciones <- dat_sem_20202_g10_n10_m004_U514[[3]]
save(mat_calif_generaciones,file = "mat_calif_generaciones.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calificaciones_g10_n10_m004_U514/mat_calif_generaciones.RData")
# _g10_n10_m004_U514
# Figura: Media calificaciones --------------------------------------------
(media_x_generacion <- colMeans(mat_calif_generaciones))
plot(media_x_generacion,main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "media_calif_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
dat_sem_20202_g10_n10_m004_U514[[2]]
calif_mejor_elem <- dat_sem_20202_g10_n10_m004_U514[[2]]
save(calif_mejor_elem ,file = "calif_mejor_elem .RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem ")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem .RData")
save(calif_mejor_elem ,file = "calif_mejor_elem.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem.RData")
plot(calif_mejor_elem ,main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
plot(calif_mejor_elem,ylim = c(-1300,-500),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
plot(calif_mejor_elem,ylim = c(-1300,-400),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
# Figura: Media calificaciones --------------------------------------------
min(calif_mejor_elem)
max(calif_mejor_elem)
plot(calif_mejor_elem,ylim = c(-1300,-500),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
plot(calif_mejor_elem,ylim = c(-1300,-450),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
plot(calif_mejor_elem,ylim = c(-1300,-400),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
# Figura: Media calificaciones --------------------------------------------
min(calif_mejor_elem)#-1258.83
max(calif_mejor_elem)#-514.413
plot(calif_mejor_elem,ylim = c(-1300,-400),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "calif_mejores_hijos_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
calif_mejores_hijos_g10_n10_m004_U514.R
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calificaciones_g10_n10_m004_U514/mat_calif_generaciones.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calificaciones_g10_n10_m004_U514/mat_calif_generaciones.RData")
# _g10_n10_m004_U514
# Figura: Boxplot calificaciones ------------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (dim(mat_calif_generaciones)[1]*(k-1))+1:dim(mat_calif_generaciones)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",xlab = "Generación",
main = "                            Calificación de asignaciones por generación",
y = "Calificaciones",ylab = "Calificación",
add = "jitter")
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",xlab = "Generación",
main = "Calificación de asignaciones por generación",
y = "Calificaciones",ylab = "Calificación",
add = "jitter")
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",xlab = "Generación",
main = "Calificación de asignaciones por generación",
y = "Calificaciones",ylab = "Calificación",
add = "jitter")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "boxplot_calif_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Figura: Media calificaciones --------------------------------------------
(media_x_generacion <- colMeans(mat_calif_generaciones))
plot(media_x_generacion,main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
plot(media_x_generacion,ylim = c(-1300,-500),
main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
plot(media_x_generacion,ylim = c(-1300,-400),
main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
# Figura: Media calificaciones --------------------------------------------
(media_x_generacion <- colMeans(mat_calif_generaciones))
plot(media_x_generacion,ylim = c(-1300,-400),
main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "media_calif_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Figura: Varianza calificaciones -----------------------------------------
# install.packages('resample')
library(resample)
(var_x_generacion <- colVars(mat_calif_generaciones))
plot(var_x_generacion,main = "Varianza de calificaciones por generación",
xlab = "Generación",ylab = "Varianza de calificación")
# Figura: Varianza calificaciones -----------------------------------------
# install.packages('resample')
library(resample)
(var_x_generacion <- colVars(mat_calif_generaciones))
plot(var_x_generacion,main = "Varianza de calificaciones por generación",
xlab = "Generación",ylab = "Varianza de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "varianza_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_num_genes_g10_n10_m004_U514/mat_num_genes.RData")
# Figura: Boxplot número de genes -----------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_num_gen <- data.frame(Num_genes = 0,
Generaciones = sort(rep(c(1:dim(mat_num_genes)[2]),
dim(mat_num_genes)[1])))
for(k in 1:dim(mat_num_genes)[2]){
vec <- (dim(mat_num_genes)[1]*(k-1))+1:dim(mat_num_genes)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_num_gen[vec,1] <- mat_num_genes[,k]
}
# Create basic boxplot
ggboxplot(df_num_gen, x = "Generaciones",xlab = "Generación",
main = "                  Número de genes en asignaciones por generación",
y = "Num_genes",ylab = "Número de genes",
add = "jitter")
# Figura: Boxplot número de genes -----------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_num_gen <- data.frame(Num_genes = 0,
Generaciones = sort(rep(c(1:dim(mat_num_genes)[2]),
dim(mat_num_genes)[1])))
for(k in 1:dim(mat_num_genes)[2]){
vec <- (dim(mat_num_genes)[1]*(k-1))+1:dim(mat_num_genes)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_num_gen[vec,1] <- mat_num_genes[,k]
}
# Create basic boxplot
ggboxplot(df_num_gen, x = "Generaciones",xlab = "Generación",
main = "Número de genes en asignaciones por generación",
y = "Num_genes",ylab = "Número de genes",
add = "jitter")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "boxplot_num_genes_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Figura: Media calificaciones --------------------------------------------
(media_x_generacion <- colMeans(mat_calif_generaciones))
plot(media_x_generacion,#ylim = c(-1300,-400),
main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "media_calif_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g10_n10_m004_U514/calif_mejor_elem.RData")
# Figura: Media calificaciones --------------------------------------------
min(calif_mejor_elem)#-1258.83
max(calif_mejor_elem)#-514.413
plot(calif_mejor_elem,#ylim = c(-1300,-400),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "calif_mejores_hijos_g10_n10_m004_U514.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
599-587
534-527
521-514
599-534
534-521
527-514
abs(-599.43-587.61)
abs(-599.43-(-587.61))
abs(-599.43-(-534.19))
