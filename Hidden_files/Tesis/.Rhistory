# Nos aseguramos que los profesores den clase los días que pueden.
valid_y = 1
for (i in 1:i_prof){
for(t in 1:t_dias)
if(yit[i,t] > Vit[i,t]){
cat("\n y_",i,"_",t," = ",yit[i,t], " > ", Vit[i,t], " = V_",i,"_",t)
valid_y = 0}}
cat("\n")
return(valid_y)
}
# valida_V ----------------------------------------------------------------
#Esta función arroja un 1 si las matrices V son binarias y 0 e.o.c.
#No es necesario validar las dimensiones de las matrices (U y V) porque
#al momento de definirlas (ya sea a mano o a través del usuario) éstas
#se inicializan con los datos de las dimensiones deseadas, por lo que
#siempre tendrán las dimensiones que queremos.
#' Title valida_V
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, k_salones \in {1,2,3,...}
#' @param Vit: Matriz binaria con "i_prof" renglones y "t_dias" columnas
#' @example Vit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vji: Matriz binaria con "i_prof" renglones y "j_materias" columnas
#' @example Vji = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vjk: Matriz binaria con "j_materias" renglones y "k_salones" columnas
#' @example Vjk = matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
#'
#' @return valid_v: Variable binaria que vale 1 si las matrices Vit, Vji, Vjk, son binarias, cero si no
valida_V = function(param){
#Inicializamos las variables
valid_v = 1 #Variable que nos indica si todas las matrices son binarias
valid1 = 1
valid2 = 1
valid3 = 1
for(opc in 1:3){
switch(opc,
'1' = {#Verificamos que la matriz Vit sea binaria
for(i in 1:i_prof)for(t in 1:t_dias){
if(Vit[i,t] != 1 && Vit[i,t] != 0){
valid1 = 0}}},
'2' = {#Verificamos que la matriz Vji sea binaria
for(i in 1:i_prof)for(j in 1:j_materias){
if(Vji[j,i] != 1 && Vji[j,i] != 0){
valid2 = 0}}},
'3' = {#Verificamos que la matriz Vjk sea binaria
for(j in 1:j_materias)for(k in 1:k_salones){
if(Vjk[j,k] != 1 && Vjk[j,k] != 0){
valid3 = 0}}})}
if(valid1 == 0){
cat("\nLa matriz Vit no es binaria\n")
valid_v = 0}
if(valid2 == 0){
cat("\nLa matriz Vji no es binaria\n")
valid_v = 0}
if(valid3 == 0){
cat("\nLa matriz Vjk no es binaria\n")
valid_v = 0}
return(valid_v)
}
# Función genera_cromosoma ---------------------------------------------------------
#Esta función sólo recibe el número de materias, profesores, días,
#periodos y salones que se tienen y genera de manera aleatoria los
#cromosomas los cuales tienen forma de matriz con j_materias" renglones
#y 4 columnas, las cuales representan:
# 1: Profesor que imparte la materia j
# 2: Día en el que se imparte la materia j
# 3: Horario en el que se imparte la materia j
# 4: Salón en el que se imparte la materia j
#' Title: genera_cromosoma
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#'
#' @return cromosoma: Matriz de "j_materias" renglones y 4 columnas
genera_cromosoma = function(param){
#Inicializamos las variables
cromosoma = matrix(0,nrow = j_materias,ncol = 4,byrow = TRUE)
columnas = c(i_prof,t_dias,h_periodos,k_salones)
for (j in 1:j_materias)for (columna in 1:4){
cromosoma[j,columna] = sample(1:columnas[columna],1)
}
return(cromosoma)
}
# Función valida_cromosoma -------------------------------------------------
#Esta función manda llamar las funciones encargadas de validar las rstricciones
#que deben cumplir los cromosomas
#' Title: valida_cromosoma
#' @param cromosoma: Matriz de "j_materias" y 4 columnas (profesor, día, horario, salón); el renglón "j" indica que la materia "j" es impartida por el profesor "i", el día "t", en el horario "h", en el salón "k"
#' @example cromosoma = matrix(c(1,9,10,11,12,1,3,5),nrow = 2,ncol = 4,byrow = TRUE)
#' @param Vit: Matriz binaria con "i_prof" renglones y "t_dias" columnas
#' @example Vit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vji: Matriz binaria con "j_materias" renglones y "i_prof" columnas
#' @example Vji = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vjk: Matriz binaria con "j_materias" renglones y "k_salones" columnas
#' @example Vjk = matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return Valid_crom = 1 si el cromosoma cumple todas las restricciones, 0 si no
valida_cromosoma = function(cromosoma,param){
Valid_crom = 1
Val_V = Valida_V(param)
Val_y = Valida_y(param)
Val_x = Valida_x(cromosoma,param)
#Si alguna restricción no se cumple entonces la función arroja un cero
if(Val_V == 0 || Val_y == 0 || Val_x == 0){
Valid_crom = 0}
return(Valid_crom)
}
# Función utilidad_cromosoma -----------------------------------------------
#En esta función se calcula la utilidad de cada cromosoma.
#' Title: utilidad_cromosoma
#' @param cromosoma: Matriz de "j_materias" y 4 columnas (profesor, día, horario, salón); el renglón "j" indica que la materia "j" es impartida por el profesor "i", el día "t", en el horario "h", en el salón "k"
#' @example cromosoma = matrix(c(1,9,10,11,12,1,3,5),nrow = 2,ncol = 4,byrow = TRUE)
#' @param Uit: Matriz con "i_prof" renglones y "t_dias" columnas, cuya entrada (i,t) representa la utilidad que tiene el profesor "i" de impartir en el día "t"
#' @example Uit = matrix(c(1,2,3,4),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Uji: con "j_materias" renglones y con "i_prof" columnas, cuya entrada (j,i) representa la utilidad que tiene el profesor "i" de impartir la materia "j"
#' @example Uji = matrix(c(5,6,7,8),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Ujt: Matriz con "j_materias" renglones y "k_salones" columnas, cuya entrada (j,k) representa la utilidad que tiene la materia "j" por ser impartida en el salón "k"
#' @example Ujt = matrix(c(1,9,10,11,12,1),nrow = 2,ncol = 3,byrow = TRUE)
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return El valor de la función objetivo del cromosoma que se le pasó como parámetro
utilidad_cromosoma = function(cromosoma,param){
utilidad = 0
for(j in 1:j_materias){
for (i in 1:i_prof){
for(t in 1:t_dias){
for(h in 1:h_periodos){
for(k in 1:k_salones){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
utilidad = utilidad + (Uji[j,i]*Ujt[j,t])}}}}}}
for (i in 1:i_prof){
for(t in 1:t_dias){
if(yit[i,t] == 1){
utilidad = utilidad + Uit[i,t]}}}
return(utilidad)
}
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V07/.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V09/Matrices m_grande_total/m_grande_total_20081_20201.RData")
View(m_grande_total)
View(m_grande_total)
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/.RData")
# Load required R packages
install.packages('ggpubr')
library(ggpubr)
# Ej. ---------------------------------------------------------------------
# Data preparation
df <- ToothGrowth
head(df)
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
# Create a box plot with summary table
ggsummarystats(
df, x = "dose", y = "len", add = "jitter",
color = "supp", palette = "npg",
ggfunc = ggboxplot
)
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
df
head(df)
ggboxplot(df, x = "dose", y = "len")
# Create basic boxplot
ggboxplot(df, x = "dose", y = "len", add = "jitter")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "dose", y = "len", add = "jitter")
mat_calif_generaciones <- data.frame(Gen_1 = mat_calif_generaciones[,1],
Gen_2 = mat_calif_generaciones[,2],
Gen_3 = mat_calif_generaciones[,3],
Gen_4 = mat_calif_generaciones[,4],
Gen_5 = mat_calif_generaciones[,5],
Gen_6 = mat_calif_generaciones[,6])
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "Generaciones",
y = "Calificaciiones", add = "jitter")
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
y = "Calificaciiones", add = "jitter")
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
#y = "Calificaciones",
add = "jitter")
rownames(mat_calif_generaciones) <- c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6")
mat_calif_generaciones
rownames(mat_calif_generaciones) <- c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6",
"Calif_7","Calif_8","Calif_9",
"Calif_10")
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
y = c("Calif_1","Calif_2","Calif_3",
"Calif_4","Calif_5","Calif_6",
"Calif_7","Calif_8","Calif_9",
"Calif_10"),
add = "jitter")
# Ej. R documentation -----------------------------------------------------
#' https://www.rdocumentation.org/packages/ggpubr/versions/0.4.0/topics/ggboxplot
# NOT RUN {
# Load data
data("ToothGrowth")
df <- ToothGrowth
# Basic plot
# +++++++++++++++++++++++++++
# width: change box plots width
ggboxplot(df, x = "dose", y = "len", width = 0.8)
# Change orientation: horizontal
ggboxplot(df, "dose", "len", orientation = "horizontal")
# Notched box plot
ggboxplot(df, x = "dose", y = "len",
notch = TRUE)
# Add dots
# ++++++++++++++++++++++++++
ggboxplot(df, x = "dose", y = "len",
add = "dotplot")
# Add jitter points and change the shape by groups
ggboxplot(df, x = "dose", y = "len",
add = "jitter", shape = "dose")
# Select which items to display: "0.5" and "2"
ggboxplot(df, "dose", "len",
select = c("0.5", "2"))
head(https://www.rdocumentation.org/packages/ggpubr/versions/0.4.0/topics/ggboxplot)
head(df)
# Ej. con datos tesis -----------------------------------------------------
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
mat_calif_generaciones <- data.frame(Gen_1 = mat_calif_generaciones[,1],
Gen_2 = mat_calif_generaciones[,2],
Gen_3 = mat_calif_generaciones[,3],
Gen_4 = mat_calif_generaciones[,4],
Gen_5 = mat_calif_generaciones[,5],
Gen_6 = mat_calif_generaciones[,6])
mat_calif_generaciones
dim(mat_calif_generaciones)
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = 1:dim(mat_calif_generaciones)[1],
y = c("Gen_1","Gen_2","Gen_3",
"Gen_4","Gen_5","Gen_6"),
add = "jitter")
mat_calif_generaciones <- data.frame(Gen1 = mat_calif_generaciones[,1],
Gen2 = mat_calif_generaciones[,2],
Gen3 = mat_calif_generaciones[,3],
Gen4 = mat_calif_generaciones[,4],
Gen5 = mat_calif_generaciones[,5],
Gen6 = mat_calif_generaciones[,6])
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = 1:dim(mat_calif_generaciones)[1],
y = c("Gen1","Gen2","Gen3",
"Gen4","Gen5","Gen6"),
add = "jitter")
# Change colors
# +++++++++++++++++++++++++++
# Change outline and fill colors
ggboxplot(df, "dose", "len",
color = "black", fill = "gray")
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
ggboxplot(df, "dose", "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
# Change fill color by groups: dose
ggboxplot(df, "dose", "len",
fill = "dose", palette = c("#00AFBB", "#E7B800", "#FC4E07"))
# Box plot with multiple groups
# +++++++++++++++++++++
# fill or color box plot by a second group : "supp"
ggboxplot(df, "dose", "len", color = "supp",
palette = c("#00AFBB", "#E7B800"))
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
ggboxplot(df, "dose", "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
head(df)
1:dim(mat_calif_generaciones)[1]
mat_calif_generaciones
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = min(mat_calif_generaciones):max(mat_calif_generaciones),
y = c("Gen1","Gen2","Gen3",
"Gen4","Gen5","Gen6"),
add = "jitter")
min(mat_calif_generaciones)
max(mat_calif_generaciones)
length(min(mat_calif_generaciones):max(mat_calif_generaciones))
head(df)
boxplot(mat_calif_generaciones[,1])
# Ej. con datos tesis -----------------------------------------------------
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_calif_generaciones.RData")
rep(c(1:6),10)
sort(rep(c(1:6),10))
length(mat_calif_generaciones[,1])
dim(mat_calif_generaciones)
sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1]))
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
df_calif_gen
dim(df_calif_gen)
dim(mat_calif_generaciones)
k <- 1
(1*(k-1)):(10*(k-1))
(1+(k-1)):(10+(k-1))
k <- 2
(1+(k-1)):(10+(k-1))
(k+(k-1)):((10*k)+(k-1))
(1+(k-1)):(10+(k-1)) #1:10
k <- 1
(1+(k-1)):(10+(k-1)) #1:10 k <- 1
vec <- (1+(k-1)):(10+(k-1)) #1:10 k <- 1
k
k <- 2
k*vec
k
(10*(k-1))+vec
k <- 3
(10*(k-1))+vec
k <- 1
(10*(k-1))+vec
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec] <- mat_calif_generaciones[,k]
}
df_calif_gen
1:dim(mat_calif_generaciones)[2]
mat_calif_generaciones
k
mat_calif_generaciones[,k]
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec,1]
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
df_calif_gen
vec
k
source('C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/ejemplo_funcion_ggboxplot.R')
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
cat("k = ", k,"\n vec = ",vec)
# df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+(1+(k-1)):(10+(k-1))
cat("\nk = ", k,"\n\n vec = ",vec)
# df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
k <- 1
(1+(k-1)):(10+(k-1))
vec <- (1+(k-1)):(10+(k-1))
k
(10*(k-1))+vec
k <- 2
(10*(k-1))+1:10
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (10*(k-1))+1:10
# cat("\nk = ", k,"\n\n vec = ",vec)
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
df_calif_gen
# Create basic boxplot
ggboxplot(mat_calif_generaciones, x = "Generaciones",
y = "Calificaciones",
add = "jitter")
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",
y = "Calificaciones",
add = "jitter")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_gmm_esqueleto_fin/wait_mat_esqueleto_inicial.RData")
load("Programas/Figuras PDF/fig_gmm_esqueleto_fin/wait_mat_esqueleto_final.RData")
library(mixtools)
# param_graficas ----------------------------------------------------------
param_graficas <- list()
# param_graficas$color_barras = rgb(91,155,213)##Azul como excel
# param_graficas$col_barras = '#5b9bd5' ##Azul como excel
param_graficas$col_barras = "skyblue" ##Azul cielo
# param_graficas$col1_hist = rgb(0,0,1,1/4)##Azul histogramas
param_graficas$col1_hist = "skyblue" ##Azul cielo histogramas
param_graficas$col2_hist = rgb(1,0,0,1/4)##Rojo histogramas
param_graficas$col3_hist = "purple" ##Morado histogramas
param_graficas$col4_hist = "magenta" ##Magenta histogramas
param_graficas$col5_hist = "limegreen" ##Verde histogramas
# param_graficas$col5_hist = "green" ##Verde histogramas
param_graficas$col1_linea = "blue" ##Azul densidad
param_graficas$col2_linea = "red" ##Rojo densidad
param_graficas$col3_linea = "purple" ##Morado densidad
param_graficas$lwd_dens = 6 #Ancho de línea para densidad ajustada
param_graficas$ancho_pdf = 8 #Anchura para guardar imagen
param_graficas$altura_pdf = 6 #Altura para guardar imagen
param_graficas$dir_TeX = "TeX/LaTeX/Pictures/"
# demo(graphics) # Ejecútela usted
# dev.off()#Para salir de la función par()
# Modelos GMM --------------------------------------------------------------
mixmdl_1_esq <- normalmixEM(wait_mat_esqueleto_inicial,k = 4)#Modelo inicial
mixmdl_esqueleto <- normalmixEM(wait_mat_esqueleto_final,mixmdl_1_esq$mu)#Modelo final
# Figura ------------------------------------------------------------------
hist(wait_mat_esqueleto_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de grupos en un esqueleto",
ylab = "Frecuencia reativa",
xlab = "Horas")
lines(density(rnorm(1000,mean = mixmdl_esqueleto$mu,sd = mixmdl_esqueleto$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.11,"Modelo de mezcla de normales",
bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
# cex=1.1,
lwd=2)
mixmdl_esqueleto$mu
mixmdl_esqueleto$sigma
mixmdl_1_esq$mu
mixmdl_esqueleto <- normalmixEM(wait_mat_esqueleto_final,
sort(mixmdl_1_esq$mu))#Modelo final
sort(mixmdl_1_esq$mu)
mixmdl_esqueleto$mu
mixmdl_esqueleto$sigma
mixmdl_esqueleto <- normalmixEM(wait_mat_esqueleto_final,
sort(mixmdl_1_esq$mu),k = 4)#Modelo final
mixmdl_esqueleto$mu
mixmdl_esqueleto$sigma
# Figura ------------------------------------------------------------------
hist(wait_mat_esqueleto_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de grupos en un esqueleto",
ylab = "Frecuencia reativa",
xlab = "Horas")
lines(density(rnorm(1000,mean = mixmdl_esqueleto$mu,sd = mixmdl_esqueleto$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.11,"Modelo de mezcla de normales",
bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
# cex=1.1,
lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_mat_esqueleto_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de grupos en un esqueleto",
ylab = "Frecuencia reativa",
xlab = "Horas")
lines(density(rnorm(1000,mean = mixmdl_esqueleto$mu,sd = mixmdl_esqueleto$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10,0.11,"Modelo de mezcla de normales",
bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
# cex=1.1,
lwd=2)
# Figura ------------------------------------------------------------------
hist(wait_mat_esqueleto_final,freq = F,breaks = seq(6,22,by = 1),
main = "Histograma de grupos en un esqueleto",
ylab = "Frecuencia reativa",
xlab = "Horas")
lines(density(rnorm(1000,mean = mixmdl_esqueleto$mu,sd = mixmdl_esqueleto$sigma)),
lty=1,lwd=2,col = param_graficas$col1_linea)
legend(10.5,0.11,"Modelo de mezcla de normales",
bty = "n",
col=param_graficas$col1_linea,lty=c(1,1),
# cex=1.1,
lwd=2)
mixmdl_esqueleto$mu
mixmdl_esqueleto$sigma
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "gmm_esqueleto_fin.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
