dim(mat_solicitudes_restantes)[1])
# cat("Entra a mutación",file="outfile.txt",sep="\n",append=TRUE)
(gen_elegido <- elige_gen_de_solicitud(mat_solicitudes_restantes,
hijo,param))
}
if(r_num_muta<prob_mutacion && dim(mat_solicitudes_restantes)[1]==0){
#La 2° condición verifica que ya no hay solicitudes para elegir
cat("\n*** La matriz mat_solicitudes_restantes, ya no tiene información ***")
cat("\n*** g = ",g," ***")
cat("\n*** hijo = ",n," ***")
}
if(dim(gen_elegido)[1]==0 || is.na(gen_elegido[1])){
#' Cuando la matriz de solicitudes restantes tiene pocos
#' grupos se arroja un gen lleno de NA's
cat("\n Entra al if de *emergencia*")
(gen_elegido <- padre_elegido[ind_gen,1:4])
}
hijo <- rbind(hijo,gen_elegido)
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen] + 1
#' Se ajusta la información de las solicitudes
mat_solicitudes_restantes <- ajusta_mat_solicitudes(
mat_solicitudes_restantes,gen_elegido)
### 8) Ajustar información de los padres con respecto al nuevo
###gen del hijo
# (num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
# num_max_gpos[2,num_materia_gen] <- num_max_gpos[2,num_materia_gen] + 1
lista_padres <- ajusta_genes_padres(esq_hijo,padre_1,padre_2,
gen_elegido,mat_esqueleto)
# lista_padres <- ajusta_genes_padres(esq_hijo,padre_1,padre_2,
#                                     gen_elegido,mat_esqueleto_cotas)
padre_1 <- lista_padres[[1]]
padre_2 <- lista_padres[[2]]
}#Fin while()
#' Quitamos el renglón de ceros inicial
hijo <- unique(hijo)#Para evitar repeticiones en los grupos
hijo <- hijo %>% filter(Profesor != 0)
### 9) Añadir los genes restantes del otro padre al hijo
if(dim(padre_1)[1] > 0){
for(i in 1:dim(padre_1)[1]){
gen_elegido <- padre_1[i,]
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen]+1
}
hijo <- rbind(hijo,padre_1[,1:4])
}
if(dim(padre_2)[1] > 0){
for(i in 1:dim(padre_2)[1]){
gen_elegido <- padre_2[i,]
(num_materia_gen <- arroja_num_materia(as.character(gen_elegido[1])))
(ind_hora_gen <- which(7:21 == as.numeric(gen_elegido[4])))
esq_hijo[ind_hora_gen,num_materia_gen] <- esq_hijo[ind_hora_gen,
num_materia_gen]+1
}
hijo <- rbind(hijo,padre_2[,1:4])
}
#' Se asignan profesores a los grupos faltantes, como la
#' población inicial.
esq_gpos_faltantes <- mat_esqueleto - esq_hijo
lista_asig <- gen_asignacion(esq_gpos_faltantes,
mat_solicitudes_restantes,
param)#12.78 seg
mat_asig <- lista_asig[[1]]
hijo <- rbind(hijo,mat_asig)
### 2) Calificar y 3) Ordenar las calificaciones del hijo
# esq_hijo <- gen_esq_hijo(hijo,param)#Grupos con profesor en el hijo
lista_hijo <- list(hijo,esq_hijo)
lista_calif_hijo <- califica_asignacion(mat_esqueleto,
mat_solicitudes_real,
lista_hijo,param)
poblacion_nueva[[n]] <- lista_calif_hijo
#Cada hijo vuelve a iniciar con la matriz de solicitudes completa
mat_solicitudes_restantes <- mat_solicitudes_real#1886 5
}#Fin for(n)
# cat("\nEl ciclo tardó: ",(proc.time()-ptm_pob)[3]/60,
#     " minutos. Para 1 generación \n")#15/37.83min
lista_info <- califica_ordena_asig(poblacion_nueva,param)
mat_calif_asig <- lista_info[[1]]
poblacion <- lista_info[[2]]
for (p in 1:tam_poblacion) {
mat_num_genes[p,(g+1)] <- dim(poblacion[[p]])[1]
}
# save(mat_num_genes,file = "mat_num_genes.RData")
### 12) Guardar una matriz con la calificación x gpo. de las
#' asignaciones (como xiii de T45)
matrices_calif_x_generacion[[(g+1)]] <- lista_info[[3]]
### 13) Hacer heatmap de la matriz en 12)
heatmap(matrices_calif_x_generacion[[(g+1)]][,1:650],
Colv = NA, Rowv = NA,
main = paste0("Calificaciones ordenadas de generación ",g+1),
scale="none",col=colMain)
### 11) Guardar la mejor asignación de la generación
ind_mejor_asig <- mat_calif_asig[tam_poblacion,1]
mejores_asig[[(g+1)]] <- list(mat_calif_asig,
poblacion[[ind_mejor_asig]])
#Graficar datos
calif_mejor_elem[(g+1)] <- mat_calif_asig[tam_poblacion,2]
plot(calif_mejor_elem[1:(g+1)],
main = "Calificaciones del mejor elemento",
xlab = "Generación",ylab = "Calificación")
mat_calif_generaciones[,(g+1)] <- mat_calif_asig[,2]
matplot(mat_calif_generaciones[,1:(g+1)],type = "l",
main = "Calificaciones de las asignaciones por generación",
xlab = "Asignaciones",ylab = "Calificaciones")
matplot(mat_num_genes[,1:(g+1)],type = "l",
main = "Número de genes por generación",
xlab = "Asignaciones",ylab = "Número de genes")
}#Fin for(g)
tiempo_minutos <- (proc.time()-ptm_generaciones)[3]/60
cat("\nEl ciclo tardó: ",tiempo_minutos," minutos. Para ",
num_generaciones," generaciones \n")
##126.403 min = 2hrs 6.4min - 5 generaciones
##47.87 min - 3 generaciones
##159.75 min - 6 generaciones
##171.17 min = 2hrs 51.17min - 6 generaciones
##147.55 min = 2hrs 51.17min - 6 generaciones
##71.68 min = 1hr 11.68min - 3 generaciones
##404.65 min = 6hr 44.65min - 1+5 generaciones
##38.21 min - 1+2 generaciones tam_pob = 5
##100.67 min - 1+2 generaciones tam_pob = 15
##83.01 min - 1+5 generaciones tam_pob = 5
##38.68 min - 1+2 generaciones tam_pob = 5
##106.56 min - 1+2 generaciones tam_pob = 15
##90.83 min - 1+5 generaciones tam_pob = 5
##173.22 min - 1+5 generaciones tam_pob = 10
##101.68 min - g = 6, tam_pob =  5#ERROR
##55.24 min - g = 4, tam_pob =  5#ERROR
##119.38 min - g = 7, tam_pob =  5#ERROR
##136.14 min - g = 8, tam_pob =  5#ERROR
##109.32 min - g = 6, tam_pob =  5#ERROR
##153.95 min - 1+9 generaciones tam_pob = 5
##39.52 min - 1+2 generaciones tam_pob = 5
##394.80 min - 1+9 generaciones tam_pob = 10
##176.08 min - 1+5 generaciones tam_pob = 10
##156.97 min - 1+9 generaciones tam_pob = 5
##116.99 min - 1+2 generaciones tam_pob = 15
##96.63 min - 1+5 generaciones tam_pob = 5
# View(matrices_calif_x_generacion)
# View(mejores_asig)
# View(mejores_asig[[num_generaciones]])
# View(mejores_asig[[num_generaciones]][[1]])
# View(mejores_asig[[num_generaciones]][[2]])
# View(mejores_asig[[1]][[1]])
# mejores_asig[[1]][[1]]
# mejores_asig[[2]][[1]]
# mejores_asig[[3]][[1]]
# mejores_asig[[4]][[1]]
# mejores_asig[[5]][[1]]
# mejores_asig[[6]][[1]]
### 14) Se define la asignación final
mejor_asig <- mejores_asig[[(num_generaciones+1)]][[2]]
mat_asignacion_final <- cbind(mejor_asig$Materia,
mejor_asig$Profesor,
mejor_asig$Horario)
colnames(mat_asignacion_final) <- c("Materia","Profesor","Horario")
# View(mat_asignacion_final)
# save(mat_asignacion_final,file = "mat_asignacion_final.RData")
# Esqueleto asignación final
esq_asig_final <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
rownames(esq_asig_final) <- param$nombre_hrs
colnames(esq_asig_final) <- param$vec_nom_materias_total
asig_final  <- data.frame(mat_asignacion_final ,Num_Materia = 0)
for(r in 1:dim(asig_final )[1]){
materia <- asig_final$Materia[r]
asig_final$Num_Materia[r] <- arroja_num_materia(materia)
}
for(m in 1:length(param$vec_nom_materias_total)){
materia <- param$vec_nom_materias_total[m]
cat("\n Materia ",m,": ",materia)
mat_materia <- asig_final  %>% filter(Materia == materia)
for(h in 1:length(param$Horas)){
hora <- param$Horas[h]
mat_hora <- mat_materia %>% filter(Horario == hora)
esq_asig_final[h,m] <- dim(mat_hora)[1]
}
}
# Info de grupos sin asignación
dif_x_materia <- colSums(mat_esqueleto) - colSums(esq_asig_final)
dif_rel <- (colSums(mat_esqueleto) - colSums(esq_asig_final))/colSums(mat_esqueleto)
info_gpos_sin_asig <- data.frame(mat_esq = colSums(mat_esqueleto),
esq_asig_fin = colSums(esq_asig_final),
gpos_sin_asig = dif_x_materia,
dif_rel = dif_rel)
# View(info_gpos_sin_asig)
# Vector con info de AG
vec_info_AG <- data.frame(Num_generaciones = num_generaciones+1,
Tam_pob = tam_poblacion,
Tiempo = tiempo_minutos,
Mejor_calif = max(calif_mejor_elem),
Num_genes_asig_fin = dim(mat_asignacion_final)[1],
Calif_asig_fin = calif_mejor_elem[num_generaciones+1],
Prom_genes_gen1 = mean(mat_num_genes[,1]),
Prom_genes_generaciones = mean(
mat_num_genes[,2:(num_generaciones+1)]))
list_asignacion_final <- list()
list_asignacion_final[[1]] <- mat_asignacion_final
list_asignacion_final[[2]] <- calif_mejor_elem #Vector con calificaciones de los mejores elementos por generación
list_asignacion_final[[3]] <- mat_calif_generaciones #Matriz con calificaciones de todos los elementos de todas las generaciones
list_asignacion_final[[4]] <- matrices_calif_x_generacion #Lista de tamaño num_generaciones+1 con las matrices de calificaciones ordenadas por generación .
list_asignacion_final[[5]] <- mejores_asig #Lista de tamaño num_generaciones+1 con la información de los mejores hijos de cada generación.
list_asignacion_final[[6]] <- mat_num_genes #Matriz con el número de genes de todos los elementos por generación
list_asignacion_final[[7]] <- mat_esqueleto
list_asignacion_final[[8]] <- mat_solicitudes_real
list_asignacion_final[[9]] <- param
list_asignacion_final[[10]] <- vec_info_AG #Vector con información del AG y sus resultados
list_asignacion_final[[11]] <- esq_asig_final #mat_esqueleto de la asignación final
list_asignacion_final[[12]] <- info_gpos_sin_asig #Matriz con las columnas: mat_esq (gpos. x materia en mat_esqueleto), esq_asig_fin (gpos. x materia en esq_asig_final), gpos_sin_asig (gpos. sin asignación x materia), dif_rel (diferencia relativa x materia)
names(list_asignacion_final) <- c("mat_asignacion_final",
"calif_mejor_elem",
"mat_calif_generaciones",
"matrices_calif_x_generacion",
"mejores_asig",
"mat_num_genes",
"mat_esqueleto",
"mat_solicitudes_real",
"param",
"mat_info_AG",
"esq_asig_final",
"info_gpos_sin_asig")
cat("\nLa función AG_asignaciones tardó: ",(proc.time()-ptm)[3]/60,
" minutos\n")
return(list_asignacion_final)
}
# Ej. ---------------------------------------------------------------------
list_asignacion_final <- AG_asignaciones(mat_esqueleto,
mat_solicitudes_real,
param)# min
list_asignacion_final[[10]]
dat_sem_20202_g08_n08_m004_U510 <- list_asignacion_final
save(dat_sem_20202_g08_n08_m004_U510,file = "dat_sem_20202_g08_n08_m004_U-510.RData")
dat_sem_20202_g08_n08_m004_U510 <- list_asignacion_final
save(dat_sem_20202_g08_n08_m004_U510,file = "dat_sem_20202_g08_n08_m004_U-510.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g10_n10_m004_U-514.RData")
dat_sem_20202_g10_n10_m004_U-514[[6]]
dat_sem_20202_g10_n10_m004_U514[[6]]
dat_sem_20202_g10_n10_m004_U514[[10]]
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g06_n05_m004_U-534.RData")
dat_sem_20202_g06_n05_m004_U534[[10]]
list_asignacion_final$mat_info_AG
mat_info_AG <- dat_sem_20202_g06_n05_m004_U534[[10]]
rbind(mat_info_AG,list_asignacion_final$mat_info_AG)
View(rbind(mat_info_AG,list_asignacion_final$mat_info_AG))
mat_info_AG <- rbind(mat_info_AG,list_asignacion_final$mat_info_AG)
mat_info_AG
save(mat_info_AG,file = "mat_info_AG.RData")
dat_sem_20202_g08_n08_m004_U510[[10]]
dat_sem_20202_g08_n08_m004_U510[[10]] <- mat_info_AG
save(dat_sem_20202_g08_n08_m004_U510,file = "dat_sem_20202_g08_n08_m004_U-510.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/mat_info_AG.RData")
mat_info_AG
View(mat_info_AG)
#Si se carga el archivo de excel
asig_fijas <- read_excel("horario.xlsx", sheet = "Horario")
asig_fijas
dim(asig_fijas)
is.character(asig_fijas[1,1])
asig_fijas[1,1]
r <- 1
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
(ind_prof <- which(mat_solicitudes_real[,1] == prof))
(ind_hora <- which(mat_solicitudes_real[,5] == hora))
(ind_materia <- which(mat_solicitudes_real[,3] == materia))
(elim_hora_prof <- intersect(ind_prof,ind_hora))
(elim_materia_prof <- intersect(ind_prof,ind_materia))
(ind_elim <- union(elim_hora_prof,elim_materia_prof))
mat_solicitudes_real[590,]
mat_solicitudes_real <- mat_solicitudes_real[-ind_elim,]
dim(mat_solicitudes_real)
r <- 2
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
(ind_prof <- which(mat_solicitudes_real[,1] == prof))
(ind_hora <- which(mat_solicitudes_real[,5] == hora))
(ind_materia <- which(mat_solicitudes_real[,3] == materia))
(elim_hora_prof <- intersect(ind_prof,ind_hora))
(elim_materia_prof <- intersect(ind_prof,ind_materia))
(ind_elim <- union(elim_hora_prof,elim_materia_prof))
mat_solicitudes_real[ind_elim,]
mat_solicitudes_real <- mat_solicitudes_real[-ind_elim,]
dim(mat_solicitudes_real)
r <- 3
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
(ind_prof <- which(mat_solicitudes_real[,1] == prof))
(ind_hora <- which(mat_solicitudes_real[,5] == hora))
(ind_materia <- which(mat_solicitudes_real[,3] == materia))
(elim_hora_prof <- intersect(ind_prof,ind_hora))
(elim_materia_prof <- intersect(ind_prof,ind_materia))
(ind_elim <- union(elim_hora_prof,elim_materia_prof))
mat_solicitudes_real[ind_elim,]
mat_solicitudes_real[elim_materia_prof,]
dim(mat_solicitudes_real[-elim_materia_prof,])
dim(mat_solicitudes_real)
mat_solicitudes_real <- mat_solicitudes_real[-ind_elim,]
dim(elim_materia_prof)
length(elim_materia_prof)
list_asignacion_final[[1]]
View(list_asignacion_final[[1]])
View(rbind(list_asignacion_final[[1]],asig_fijas))
697-682
dim(unique(rbind(list_asignacion_final[[1]],asig_fijas)))
dim(rbind(list_asignacion_final[[1]],asig_fijas))
View(unique(rbind(list_asignacion_final[[1]],asig_fijas)))
param$tam_poblacion = 5
param$num_generaciones = 2
View(mat_esqueleto)
#' 4b) Simulación de solicitudes de profesores (pseudo-real)
set.seed(1806)
mat_solicitudes_real <- gen_solicitudes_real(mat_esqueleto,param)#8.3 seg
#Si se carga el archivo de excel
asig_fijas <- read_excel("horario.xlsx", sheet = "Horario")
mat_solicitudes_restantes <- mat_solicitudes_real
for(r in 1:dim(asig_fijas)[1]){
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
(ind_prof <- which(mat_solicitudes_restantes[,1] == prof))
(ind_hora <- which(mat_solicitudes_restantes[,5] == hora))
(ind_materia <- which(mat_solicitudes_restantes[,3] == materia))
(elim_hora_prof <- intersect(ind_prof,ind_hora))
(elim_materia_prof <- intersect(ind_prof,ind_materia))
(ind_elim <- union(elim_hora_prof,elim_materia_prof))
if(length(ind_elim) > 0){
mat_solicitudes_restantes <- mat_solicitudes_restantes[-ind_elim,]
}
}#Fin for(r)
dim(mat_solicitudes_real)
dim(mat_solicitudes_restantes)
2021-1995
2021-1992
list_asignacion_final <- AG_asignaciones(mat_esqueleto,
mat_solicitudes_restantes,param)
list_asignacion_final[[1]] <- rbind(list_asignacion_final[[1]],asig_fijas)
View(list_asignacion_final[[1]])
dim(list_asignacion_final[[1]])
dim(unique(list_asignacion_final[[1]]))
# Ej. ---------------------------------------------------------------------
load(file = "mat_info_AG.RData")
mat_info_AG
list_asignacion_final$mat_info_AG
mat_info_AG <- rbind(mat_info_AG,list_asignacion_final$mat_info_AG)
mat_info_AG
save(mat_info_AG,file = "mat_info_AG.RData")
list_asignacion_final$mat_info_AG <- mat_info_AG
dat_sem_20202_g03_n05_m004_U655 <- list_asignacion_final
save(dat_sem_20202_g03_n05_m004_U655,file = "dat_sem_20202_g03_n05_m004_U-655.RData")
View(mat_info_AG)
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/dat_sem_20202_g08_n08_m004_U-510.RData")
View(dat_sem_20202_g08_n08_m004_U510)
dat_sem_20202_g08_n08_m004_U510[[2]]
calif_mejor_elem <- dat_sem_20202_g08_n08_m004_U510[[2]]
save(calif_mejor_elem,file = "calif_mejor_elem.RData")
mat_calif_generaciones <- dat_sem_20202_g08_n08_m004_U510[[3]]
mat_calif_generaciones
save(mat_calif_generaciones,file = "mat_calif_generaciones.RData")
mat_num_genes <- dat_sem_20202_g08_n08_m004_U510[[6]]
mat_num_genes
save(mat_num_genes,file = "mat_num_genes.RData")
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calif_mejores_hijos_g08_n08_m004_U510/calif_mejor_elem.RData")
# Figura: Media calificaciones --------------------------------------------
min(calif_mejor_elem)#-1258.83
max(calif_mejor_elem)#-514.413
plot(calif_mejor_elem,#ylim = c(-1300,-400),
main = "Calificación del mejor elemento por generación",
xlab = "Generación",ylab = "Calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "calif_mejores_hijos_g08_n08_m004_U510.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_calificaciones_g08_n08_m004_U510/mat_calif_generaciones.RData")
# Figura: Boxplot calificaciones ------------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_calif_gen <- data.frame(Calificaciones = 0,
Generaciones = sort(rep(c(1:dim(mat_calif_generaciones)[2]),
dim(mat_calif_generaciones)[1])))
for(k in 1:dim(mat_calif_generaciones)[2]){
vec <- (dim(mat_calif_generaciones)[1]*(k-1))+1:dim(mat_calif_generaciones)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_calif_gen[vec,1] <- mat_calif_generaciones[,k]
}
# Create basic boxplot
ggboxplot(df_calif_gen, x = "Generaciones",xlab = "Generación",
main = "Calificación de asignaciones por generación",
y = "Calificaciones",ylab = "Calificación",
add = "jitter")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "boxplot_calif_g08_n08_m004_U510.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Figura: Media calificaciones --------------------------------------------
(media_x_generacion <- colMeans(mat_calif_generaciones))
plot(media_x_generacion,#ylim = c(-1300,-400),
main = "Promedio de calificaciones por generación",
xlab = "Generación",ylab = "Media de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "media_calif_g08_n08_m004_U510.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
# Figura: Varianza calificaciones -----------------------------------------
# install.packages('resample')
library(resample)
(var_x_generacion <- colVars(mat_calif_generaciones))
plot(var_x_generacion,main = "Varianza de calificaciones por generación",
xlab = "Generación",ylab = "Varianza de calificación")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "varianza_g08_n08_m004_U510.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
# rm(list=ls())  # Borra variables
# cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis")
#' Se cargan los datos
load("Programas/Figuras PDF/fig_num_genes_g08_n08_m004_U510/mat_num_genes.RData")
# Figura: Boxplot número de genes -----------------------------------------
#Definimos el data.frame que necesitamos para graficar los boxplots
df_num_gen <- data.frame(Num_genes = 0,
Generaciones = sort(rep(c(1:dim(mat_num_genes)[2]),
dim(mat_num_genes)[1])))
for(k in 1:dim(mat_num_genes)[2]){
vec <- (dim(mat_num_genes)[1]*(k-1))+1:dim(mat_num_genes)[1]
# cat("\nk = ", k,"\n\n vec = ",vec)
df_num_gen[vec,1] <- mat_num_genes[,k]
}
# Create basic boxplot
ggboxplot(df_num_gen, x = "Generaciones",xlab = "Generación",
main = "Número de genes en asignaciones por generación",
y = "Num_genes",ylab = "Número de genes",
add = "jitter")
# Se guarda la imagen -----------------------------------------------------
nom_plot <- "boxplot_num_genes_g08_n08_m004_U510.pdf"
dev.print(pdf,paste0(param_graficas$dir_TeX,nom_plot),
width=param_graficas$ancho_pdf, height=param_graficas$altura_pdf)
min(mat_num_genes)
max(mat_num_genes)
View(dat_sem_20202_g08_n08_m004_U510[[1]])
mat_asignacion_final <- dat_sem_20202_g08_n08_m004_U510[[1]]
xtable(mat_asignacion_final[order(mat_asignacion_final[,1],
as.numeric(mat_asignacion_final[,3])),])
View(dat_sem_20202_g08_n08_m004_U510)
dim(dat_sem_20202_g08_n08_m004_U510[[1]])
dim(mat_esqueleto)
sum(mat_esqueleto)
682/1091
View(dat_sem_20202_g08_n08_m004_U510[[12]])
11+15+19
45+3+21+5+5+3+9+17+14+6+11+19+11+20+9+29+4+7+2+1
241/1091
18/1091
12+5+14+10+8+6+2+18+4+4+6+4+14+20+4+9+5+5
1091-(682+241+18)
150/1091
682/747
(241+18)/1091
22.08+1.64
241+18
1091/747
747/1091
arroja_num_materia("Teoría del Riesgo")#59
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal")
source("Fn_Asignacion.R")
arroja_num_materia("Teoría del Riesgo")#59
View(mat_esqueleto)
View(mat_solicitudes_real)
View(dat_sem_20202_g08_n08_m004_U510[[7]])
View(dat_sem_20202_g08_n08_m004_U510[[8]])
#Si se carga el archivo de excel
asig_fijas <- read_excel("horario.xlsx", sheet = "Horario")
mat_solicitudes_restantes <- mat_solicitudes_real
mat_esqueleto_restante <- mat_esqueleto
r
r <- 1
(materia <- as.character(asig_fijas[r,1]))
(prof <- as.character(asig_fijas[r,2]))
(hora <- as.character(asig_fijas[r,3]))
arroja_num_materia(materia)
#Se eliminan los grupos en el esqueleto
(h_hora <- which(7:21 == as.numeric(hora)))
(j_materia <- arroja_num_materia(materia))
mat_esqueleto_restante[h_hora,j_materia]
mat_esqueleto_restante[h_hora,
j_materia] - 1
sin(0)
