param_sim$Materias = materia
param_sim$m_filtrada <- gen_mat_m_filtrada(param,param_sim)
mat_alumnos_corregidos <- gen_mat_alumnos_corregidos(vec_s_sem_k_info,
param,param_sim)
vec_alum_sim <- simula_alumnos(mat_alumnos_corregidos,param)
mat_demanda_alumnos[,d] <- vec_alum_sim
}
cat("\nEl proceso tardó: ",(proc.time()-ptm)[3]," segundos\n")##45.91
rownames(mat_demanda_alumnos) <- param$nombre_hrs
colnames(mat_demanda_alumnos) <- param$vec_nom_materias_total
return(mat_demanda_alumnos)
}
# Ej. ---------------------------------------------------------------------
mat_demanda_alumnos <- gen_mat_demanda_alumnos(param,param_sim)
View(mat_demanda_alumnos)
# gen_solicitudes_1_profesor ----------------------------------------------
#' Title gen_solicitudes_1_profesor: Función que genera la solicitud de
#' un solo profesor. Arroja la matriz "mat_1_solicitud" de 5 columnas
#' (Profesor,TC,Materia,Num_Materia,Horario) y 6 renglones que tiene la
#' información de la solicitud de "nom_prof". Se eligen 2 materias y hasta
#' 3 diferentes horarios.
#'
#' @param nom_prof: Nombre del profesor del que se va a obtener la solicitud.
#' @param tipo_prof: Variable binaria que vale 1 si el profesor es de
#' tiempo completo y cero si no.
#' @param param: Lista con los diferentes parámetros que se utilizan en las
#' funciones que se mandan llamar.
#'
#' @example param <- list(nombre_hrs = c("7-8","8-9"),nombre_sem = c("2015-1",
#' "2015-2"),Semestres = c(20192,20201),Horas = c(7,8,9,10),q1 = 80, q2 = 90)
#'
#' @return mat_1_solicitud: Matriz de 5 columnas (Profesor,TC,Materia,
#' Num_Materia,Horario) y 6 renglones que tiene la información de la
#' solicitud de "nom_prof". Se eligen 2 materias y hasta 3 diferentes
#' horarios.
#'
#' @examples
#' mat_1_solicitud <- gen_solicitudes_1_profesor("Arrigo Coen",0,param)
#' mat_1_solicitud <- gen_solicitudes_1_profesor("Margarita Chávez",1,param)
#'
gen_solicitudes_1_profesor <- function(nom_prof,tipo_prof,param){
#Se definen las variables que se van a utilizar
num_col_Profesor <- arroja_ind_col_MG("Profesor")
num_col_horario_num <- arroja_ind_col_MG("horario_num")##4
num_col_NumMateria <- arroja_ind_col_MG("Num_materia")##37
vec_nom_materias_total <- param$vec_nom_materias_total#333
m_grande_2015 <- param$m_grande_2015#8393 37
mat_1_solicitud <- data.frame(Profesor = 0,TC = 0, Materia = rep(0,6),
Num_Materia = 0,Horario = 0)
#Se definen las variables con la información de "nom_prof"
mat_1_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
materias_num_prof <- unique(mat_1_prof[,num_col_NumMateria])
horas_prof <- unique(mat_1_prof[,num_col_horario_num])
#Se llena las primeras 2 columnas
mat_1_solicitud[,1] <- nom_prof
mat_1_solicitud[,2] <- tipo_prof
#Se llena las columnas "Materia" y "Num_Materia"
if(length(materias_num_prof)==2){
mat_1_solicitud[1:3,3] <- vec_nom_materias_total[materias_num_prof[1]]
mat_1_solicitud[4:6,3] <- vec_nom_materias_total[materias_num_prof[2]]
mat_1_solicitud[1:3,4] <- materias_num_prof[1]
mat_1_solicitud[4:6,4] <- materias_num_prof[2]
}else if(length(materias_num_prof)==1){
mat_1_solicitud[,3] <- vec_nom_materias_total[materias_num_prof]
mat_1_solicitud[,4] <- materias_num_prof
}else if(length(materias_num_prof)>2){
muestra_materias <- sample(materias_num_prof,size = 2)
mat_1_solicitud[1:3,3] <- vec_nom_materias_total[muestra_materias[1]]
mat_1_solicitud[4:6,3] <- vec_nom_materias_total[muestra_materias[2]]
mat_1_solicitud[1:3,4] <- muestra_materias[1]
mat_1_solicitud[4:6,4] <- muestra_materias[2]
}
#Se llena la columna "Horario"
#' A lo más van a tener 3 horas diferentes
if(length(horas_prof)==3){
mat_1_solicitud[c(1,4),5] <- horas_prof[1]
mat_1_solicitud[c(2,5),5] <- horas_prof[2]
mat_1_solicitud[c(3,6),5] <- horas_prof[3]
}else if(length(horas_prof)==2){
mat_1_solicitud[c(1:2,4:5),5] <- horas_prof[1]
mat_1_solicitud[c(3,6),5] <- horas_prof[2]
}else if(length(horas_prof)==1){
mat_1_solicitud[,5] <- horas_prof
}else if(length(horas_prof)>3){
muestra_horas <- sample(horas_prof,size = 3)
mat_1_solicitud[c(1,4),5] <- muestra_horas[1]
mat_1_solicitud[c(2,5),5] <- muestra_horas[2]
mat_1_solicitud[c(3,6),5] <- muestra_horas[3]
}
return(mat_1_solicitud)
}
source("Fn_Asignacion.R")
install.packages("fitdistrplus")
# gen_solicitudes_1_profesor ----------------------------------------------
#' Title gen_solicitudes_1_profesor: Función que genera la solicitud de
#' un solo profesor. Arroja la matriz "mat_1_solicitud" de 4 columnas
#' (Profesor,TC,Materia, Horario) y 6 renglones que tiene la información de
#' la solicitud de "nom_prof". Se eligen 2 materias y hasta 3 diferentes
#' horarios.
#'
nom_prof<- "Arrigo Coen Coria"
tipo_prof <- 0
gen_solicitudes_1_profesor(nom_prof,tipo_prof,param)
nom_prof<- "Margarita Elvira Chávez Cano"
tipo_prof <- 1
gen_solicitudes_1_profesor(nom_prof,tipo_prof,param)
# gen_solicitudes_1_profesor ----------------------------------------------
#' Title gen_solicitudes_1_profesor: Función que genera la solicitud de
#' un solo profesor. Arroja la matriz "mat_1_solicitud" de 4 columnas
#' (Profesor,TC,Materia, Horario) y 6 renglones que tiene la información de
#' la solicitud de "nom_prof". Se eligen 2 materias y hasta 3 diferentes
#' horarios.
#'
nom_prof<- "Arrigo Coen Coria"
tipo_prof <- 0
gen_solicitudes_1_profesor(nom_prof,tipo_prof,param)
nom_prof
#Se definen las variables que se van a utilizar
num_col_Profesor <- arroja_ind_col_MG("Profesor")
num_col_horario_num <- arroja_ind_col_MG("horario_num")##4
num_col_NumMateria <- arroja_ind_col_MG("Num_materia")##37
vec_nom_materias_total <- param$vec_nom_materias_total#333
m_grande_2015 <- param$m_grande_2015#8393 37
mat_1_solicitud <- data.frame(Profesor = 0,TC = 0, Materia = rep(0,6),
Num_Materia = 0,Horario = 0)
#Se definen las variables con la información de "nom_prof"
mat_1_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
materias_num_prof <- unique(mat_1_prof[,num_col_NumMateria])
horas_prof <- unique(mat_1_prof[,num_col_horario_num])
mat_1_prof
# gen_solicitudes ---------------------------------------------------------
#' Title gen_solicitudes: Función que genera la solicitud de todos los
#' profesores en la matriz "mat_nom_prof_total". Arroja la matriz
#' "mat_solicitudes" de 4 columnas (Profesor,TC,Materia, Horario). Tiene la
#' información de las solicitudes de los profesores. Se eligen hasta dos
#' materias y hasta 3 diferentes horarios. Se quitan los renglones repetidos.
#'
mat_solicitudes <- gen_solicitudes(param)#8.56 seg
View(mat_solicitudes)
head(mat_solicitudes[mat_solicitudes[,2]==1,])
#Se definen las variables que se van a utilizar
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
sample(mat_solicitudes_TC)
sample(mat_solicitudes_TC,size = 1)
### Profesores de tiempo completo
num_al <- round(runif(1,min = 1,max = dim(mat_solicitudes_TC)[1]))
num_al
renglon <- mat_solicitudes_TC[num_al,]
renglon
#Se definen las variables que se van a utilizar
mat_demanda_aux <- mat_demanda_alumnos
mat_solicitudes_aux <- mat_solicitudes
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
renglon
which(LETTERS == "R")
LETTERS
which(param$nombre_hrs == renglon[4])
param$nombre_hrs
param$Horas
which(param$Horas == renglon[4])
renglon[4]
renglon
renglon
renglon[4]
which(param$Horas == renglon[5])
renglon[5]
which(param$Horas == as.numeric(renglon[5]))
ind_hora <- which(param$Horas == as.numeric(renglon[5]))
mat_demanda_aux[ind_hora,renglon[4]] > 0
mat_demanda_aux[ind_hora,as.numeric(renglon[4])] > 0
mat_demanda_aux[ind_hora,as.numeric(renglon[4])]
param$Horas
which(7:21 == as.numeric(renglon[5]))
# verifica_demanda_cubierta -----------------------------------------------
#' Title verifica_demanda_cubierta: Función que arroja un 1 si aún existen
#' alumnos en la i-ésima hora y en la materia j, cero si no.
#'
#' @param mat_demanda_aux: Matriz con la demanda de alumnos que se le están
#' constantemente restando los alumnos ya simulados.
#' @param renglon: Vector con la información del profesor elegido para
#' asignarle un grupo.
#'
#' @return sobran_alum_1si_0no: Variable binaria que vale 1 si aún existen
#' alumnos en la i-ésima hora y en la materia j, cero si no.
#'
#' @examples
#' sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon)
#'
verifica_demanda_cubierta <- function(mat_demanda_aux,renglon){
ind_hora <- which(7:21 == as.numeric(renglon[5]))
if(mat_demanda_aux[ind_hora,as.numeric(renglon[4])] > 0){
sobran_alum_1si_0no <- 1
}else{
sobran_alum_1si_0no <- 0
}
return(sobran_alum_1si_0no)
}
m_grande_2015 <- param$m_grande_2015
nom_prof
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
sub_mat <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat
load("Matrices m_grande_total/m_grande_total_20151_20201.RData")
#Se quitan los renglones con NA
m_grande_total <- m_grande_total[!is.na(m_grande_total[,1]),]
param$m_grande_2015 = m_grande_total
source("Fn_Asignacion.R")
install.packages("fitdistrplus")
#Se definen las variables que se van a utilizar
m_grande_2015 <- param$m_grande_2015
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
sub_mat <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat
View(sub_mat)
View(param$m_grande_2015)
load("Matrices m_grande_total/m_grande_total_20151_20201.RData")
#Se quitan los renglones con NA
# m_grande_total <- m_grande_total[!is.na(m_grande_total[,1]),]
param$m_grande_2015 = m_grande_total[!is.na(m_grande_total[,1]),]
dim(param$m_grande_2015)
dim(m_grande_total)
#Se definen las variables que se van a utilizar
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
m_grande_2015 <- param$m_grande_2015
m_grande_2015 <- m_grande_2015[!is.na(m_grande_2015[,num_col_Profesor]),]
sub_mat <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat
sub_mat_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
num_materia
renglon
num_materia <- as.numeric(renglon[4])
#Se definen las variables que se van a utilizar
nom_prof <- renglon[1]
num_materia <- as.numeric(renglon[4])
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
m_grande_2015 <- param$m_grande_2015
m_grande_2015 <- m_grande_2015[!is.na(m_grande_2015[,num_col_Profesor]),]
sub_mat_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat_prof
nom_prof
m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
#Se definen las variables que se van a utilizar
nom_prof <- as.character(renglon[1])
num_materia <- as.numeric(renglon[4])
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
m_grande_2015 <- param$m_grande_2015
m_grande_2015 <- m_grande_2015[!is.na(m_grande_2015[,num_col_Profesor]),]
sub_mat_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat_prof
View(sub_mat_prof)
num_col_NumMateria <- arroja_ind_col_MG("Num_materia")##37
sub_mat <- sub_mat_prof[sub_mat_prof[,num_col_NumMateria]==num_materia,]
sub_mat
View(sub_mat)
num_col_Alumnos <- arroja_ind_col_MG("Alumnos")##6
sub_mat[,num_col_Alumnos]
as.numeric(sub_mat[,num_col_Alumnos])
num_alum_x_profesor <- ceiling(runif(1,min = min(num_Alumnos),
max = max(num_Alumnos)))
num_Alumnos <- as.numeric(sub_mat[,num_col_Alumnos])
num_alum_x_profesor <- ceiling(runif(1,min = min(num_Alumnos),
max = max(num_Alumnos)))
num_alum_x_profesor
# simula_alum_x_profesor --------------------------------------------------
#' Title simula_alum_x_profesor: Función que simula el número de alumnos
#' para un profesor y una materia. Se obtiene la información del número de
#' alumnos que ha tenido el profesor (del 2015-1 al 2020-1), se toma el
#' mín y el máx, se simula una uniforme en ese intervalo, se redondea el
#' valor con la función ceiling y así se obtiene el valor simulado.
#'
#' @param renglon: Vector con la información del profesor elegido para
#' asignarle un grupo.
#' @param param: Lista con los diferentes parámetros que se utilizan en las
#' funciones que se mandan llamar.
#'
#' @example param <- list(nombre_hrs = c("7-8","8-9"),nombre_sem = c("2015-1",
#' "2015-2"),Semestres = c(20192,20201),Horas = c(7,8,9,10),q1 = 80, q2 = 90)
#'
#' @return num_alum_x_profesor: Número de alumnos simulados de un profesor
#' y una materia.
#'
#' @examples
#' num_alum_x_profesor <- simula_alum_x_profesor(renglon,param)
#'
simula_alum_x_profesor <- function(renglon,param){
#Se definen las variables que se van a utilizar
nom_prof <- as.character(renglon[1])
num_materia <- as.numeric(renglon[4])
num_col_Profesor <- arroja_ind_col_MG("Profesor")##2
num_col_Alumnos <- arroja_ind_col_MG("Alumnos")##6
num_col_NumMateria <- arroja_ind_col_MG("Num_materia")##37
m_grande_2015 <- param$m_grande_2015
m_grande_2015 <- m_grande_2015[!is.na(m_grande_2015[,num_col_Profesor]),]
sub_mat_prof <- m_grande_2015[m_grande_2015[,num_col_Profesor]==nom_prof,]
sub_mat <- sub_mat_prof[sub_mat_prof[,num_col_NumMateria]==num_materia,]
num_Alumnos <- as.numeric(sub_mat[,num_col_Alumnos])
num_alum_x_profesor <- ceiling(runif(1,min = min(num_Alumnos),
max = max(num_Alumnos)))
return(num_alum_x_profesor)
}
simula_alum_x_profesor(renglon,param)
renglon
# simula_alum_x_profesor --------------------------------------------------
#' Title simula_alum_x_profesor: Función que simula el número de alumnos
#' para un profesor y una materia. Se obtiene la información del número de
#' alumnos que ha tenido el profesor (del 2015-1 al 2020-1), se toma el
#' mín y el máx, se simula una uniforme en ese intervalo, se redondea el
#' valor con la función ceiling y así se obtiene el valor simulado.
#'
renglon <- c("Gerardo Sánchez Licea",1,"Análisis Matemático I",
30,12)
(num_alum_x_profesor <- simula_alum_x_profesor(renglon,param))
#Se definen las variables que se van a utilizar
mat_demanda_aux <- mat_demanda_alumnos
mat_solicitudes_aux <- mat_solicitudes
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
### Profesores de tiempo completo
num_al <- round(runif(1,min = 1,max = dim(mat_solicitudes_TC)[1]))
renglon <- mat_solicitudes_TC[num_al,]
renglon
#Se verifica si la demanda ha sido cubierta o no
sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon)
sobran_alum_1si_0no
mat_esqueleto <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
which(mat_solicitudes_aux==renglon)
renglon
#Simulamos el número de alumnos para este grupo
num_alum_x_profesor <- simula_alum_x_profesor(renglon,param)
num_alum_x_profesor
param$Horas
M_i <- which(param$Horas == as.numeric(renglon[5]))
M_j <- as.numeric(renglon[4])
M_i
M_j
mat_demanda_aux[M_i,M_j]
max(0,mat_demanda_aux[M_i,M_j]-num_alum_x_profesor)
#Se definen las variables que se van a utilizar
mat_demanda_aux <- mat_demanda_alumnos
mat_solicitudes_aux <- mat_solicitudes
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
mat_esqueleto <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
### Profesores de tiempo completo
num_al <- round(runif(1,min = 1,max = dim(mat_solicitudes_TC)[1]))
renglon <- mat_solicitudes_TC[num_al,]
M_i <- which(param$Horas == as.numeric(renglon[5]))
M_j <- as.numeric(renglon[4])
#Se verifica si la demanda ha sido cubierta o no
sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon)
renglon
sobran_alum_1si_0no
#Simulamos el número de alumnos para este grupo
num_alum_x_profesor <- simula_alum_x_profesor(renglon,param)
num_alum_x_profesor
mat_demanda_aux[M_i,M_j]
#Se actualizan las entradas de las matrices auxiliares
mat_demanda_aux[M_i,M_j] <- max(0,mat_demanda_aux[M_i,M_j]-num_alum_x_profesor)
cat("\n Se eligió la materia ",as.character(renglon[3]),
" de horario ",as.character(renglon[5]),
".\n Se simularon ",num_alum_x_profesor," alumnos.\n Antes se tenían ",
mat_demanda_alumnos[M_i,M_j]," alumnos y ahora se tienen ",
mat_demanda_aux[M_i,M_j]," alumnos.")
#Se verifica si la demanda ha sido cubierta o no
sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon)
sobran_alum_1si_0no
mat_esqueleto[M_i,M_j] <- mat_esqueleto[M_i,M_j] + 1
View8
View(mat_esqueleto)
M_i
M_j
length(param$vec_nom_materias_total)
param$nombre_hrs
rownames(mat_esqueleto) <- param$nombre_hrs
colnames(mat_esqueleto) <- param$vec_nom_materias_total
View(mat_esqueleto)
cat("\n Se eligió la materia ",as.character(renglon[3]),
" a las ",as.character(renglon[5])," hrs. \n Se simularon ",
num_alum_x_profesor," alumnos.\n Antes se tenían ",
mat_demanda_alumnos[M_i,M_j]," alumnos y ahora se tienen ",
mat_demanda_aux[M_i,M_j]," alumnos.\n Se tienen ",mat_esqueleto[M_i,M_j],
" grupos para la materia.")
mat_aux_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_aux_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
num_al
mat_solicitudes_TC
mat_solicitudes_TC[-num_al,]
mat_solicitudes_TC <- mat_solicitudes_TC[-num_al,]
sum(mat_demanda_aux)
sum(matrix(0,3,3))
dim(mat_solicitudes_TC)
dim(mat_solicitudes_TC[-c(1:529)])
dim(mat_solicitudes_TC[-c(1:529),])
#Se definen las variables que se van a utilizar
mat_demanda_aux <- mat_demanda_alumnos
# mat_solicitudes_aux <- mat_solicitudes
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
mat_esqueleto <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
rownames(mat_esqueleto) <- param$nombre_hrs
colnames(mat_esqueleto) <- param$vec_nom_materias_total
### Profesores de tiempo completo ###
while(sum(mat_demanda_aux)>0 && dim(mat_solicitudes_TC)[1]>0){
cuenta <- 1
cat("\n Iteración: ",cuenta)
num_al <- round(runif(1,min = 1,max = dim(mat_solicitudes_TC)[1]))
renglon <- mat_solicitudes_TC[num_al,]
M_i <- which(param$Horas == as.numeric(renglon[5]))
M_j <- as.numeric(renglon[4])
#Se verifica si la demanda ha sido cubierta o no
(sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon))
if(sobran_alum_1si_0no == 1){#Aún hay alumnos sin clase para esa materia
#Simulamos el número de alumnos para este grupo
num_alum_x_profesor <- simula_alum_x_profesor(renglon,param)
#Se actualizan las entradas de las matrices auxiliares
mat_demanda_aux[M_i,M_j] <- max(0,mat_demanda_aux[M_i,M_j]-num_alum_x_profesor)
mat_esqueleto[M_i,M_j] <- mat_esqueleto[M_i,M_j] + 1
mat_solicitudes_TC <- mat_solicitudes_TC[-num_al,]
}
cat("\n Se eligió la materia ",as.character(renglon[3]),
" a las ",as.character(renglon[5])," hrs. \n Se simularon ",
num_alum_x_profesor," alumnos.\n Antes se tenían ",
mat_demanda_alumnos[M_i,M_j]," alumnos y ahora se tienen ",
mat_demanda_aux[M_i,M_j]," alumnos.\n Se tienen ",mat_esqueleto[M_i,M_j],
" grupos para la materia.")
cuenta <- cuenta + 1
}
View(mat_esqueleto)
View(mat_demanda_aux)
renglon
as.numeric(renglon[4])
which(7:21 == as.numeric(renglon[5]))
length(ind_hora)
is.null(ind_hora)
is.na(ind_hora)
is.integer(ind_hora)
ind_hora==0
ind_hora
which(7:21 == as.numeric(renglon[5]))
ind_hora <- which(7:21 == as.numeric(renglon[5]))
ind_hora
length(ind_hora)
# verifica_demanda_cubierta -----------------------------------------------
#' Title verifica_demanda_cubierta: Función que arroja un 1 si aún existen
#' alumnos en la i-ésima hora y en la materia j, cero si no.
#'
#' @param mat_demanda_aux: Matriz con la demanda de alumnos que se le están
#' constantemente restando los alumnos ya simulados.
#' @param renglon: Vector con la información del profesor elegido para
#' asignarle un grupo.
#'
#' @return sobran_alum_1si_0no: Variable binaria que vale 1 si aún existen
#' alumnos en la i-ésima hora y en la materia j, cero si no.
#'
#' @examples
#' sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon)
#'
verifica_demanda_cubierta <- function(mat_demanda_aux,renglon){
ind_hora <- which(7:21 == as.numeric(renglon[5]))
#' La primera condición evita errores cuando no hay hora en la
#' columna "Horario"
if(length(ind_hora>0) &&
mat_demanda_aux[ind_hora,as.numeric(renglon[4])] > 0){
sobran_alum_1si_0no <- 1
}else{
sobran_alum_1si_0no <- 0
}
return(sobran_alum_1si_0no)
}
#Se definen las variables que se van a utilizar
mat_demanda_aux <- mat_demanda_alumnos
# mat_solicitudes_aux <- mat_solicitudes
mat_solicitudes_TC <- mat_solicitudes[mat_solicitudes[,2]==1,]
mat_solicitudes_asignatura <- mat_solicitudes[mat_solicitudes[,2]==0,]
mat_esqueleto <- matrix(0,nrow = length(param$Horas),
ncol = length(param$vec_nom_materias_total))
rownames(mat_esqueleto) <- param$nombre_hrs
colnames(mat_esqueleto) <- param$vec_nom_materias_total
### Profesores de tiempo completo ###
while(sum(mat_demanda_aux)>0 && dim(mat_solicitudes_TC)[1]>0){
cuenta <- 1
cat("\n Iteración: ",cuenta)
num_al <- round(runif(1,min = 1,max = dim(mat_solicitudes_TC)[1]))
renglon <- mat_solicitudes_TC[num_al,]
M_i <- which(param$Horas == as.numeric(renglon[5]))
M_j <- as.numeric(renglon[4])
#Se verifica si la demanda ha sido cubierta o no
(sobran_alum_1si_0no <- verifica_demanda_cubierta(mat_demanda_aux,renglon))
if(sobran_alum_1si_0no == 1){#Aún hay alumnos sin clase para esa materia
#Simulamos el número de alumnos para este grupo
num_alum_x_profesor <- simula_alum_x_profesor(renglon,param)
#Se actualizan las entradas de las matrices auxiliares
mat_demanda_aux[M_i,M_j] <- max(0,mat_demanda_aux[M_i,M_j]-num_alum_x_profesor)
mat_esqueleto[M_i,M_j] <- mat_esqueleto[M_i,M_j] + 1
mat_solicitudes_TC <- mat_solicitudes_TC[-num_al,]
cuenta <- cuenta + 1
}
cat("\n Se eligió la materia ",as.character(renglon[3]),
" a las ",as.character(renglon[5])," hrs. \n Se simularon ",
num_alum_x_profesor," alumnos.\n Antes se tenían ",
mat_demanda_alumnos[M_i,M_j]," alumnos y ahora se tienen ",
mat_demanda_aux[M_i,M_j]," alumnos.\n Se tienen ",mat_esqueleto[M_i,M_j],
" grupos para la materia.")
}#Fin while
break
source('C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/gen_esqueleto.R', echo=TRUE)
source('C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal/gen_esqueleto.R', echo=TRUE)
