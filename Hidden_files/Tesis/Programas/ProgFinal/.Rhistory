#D: La materia  X  no puede impartirse en el salón  k
#E:Se imparte más de una materia el día Mierc, en el salón k, en el horario 2
xijtkh = numeric(comb)
xijtkh[115] = 1
xijtkh[116] = 1
Valida_x(Profes,Materias,Dias,Salones,Horarios,i_prof,j_materias,t_dias,k_salones,h_periodos,ArregloCombinaciones,xijtkh,yit,Vij,Vjk)
Valida_y(i_prof,t_dias,yit,Vit)
# Ej. 5 (No se cumple ninguna restricción) --------------------------------
# Con este ejemplo, se prueba la función Valida_x
#A: La materia  X  es impartida en más de una ocasión y la materia  Y  no es impartida
#B: El profesor  B , el día  Mierc  imparte más de un curso en el horario  2
#C: El profesor  B  no puede impartir el curso  X
#D: La materia  X  no puede impartirse en el salón  k
#E:Se imparte más de una materia el día Mierc, en el salón k, en el horario 2
xijtkh = numeric(comb)
xijtkh[115] = 1
xijtkh[116] = 1
Valida_x(Profes,Materias,Dias,Salones,Horarios,i_prof,j_materias,t_dias,k_salones,h_periodos,ArregloCombinaciones,xijtkh,yit,Vij,Vjk)
# Ej. 4  (La variable "y" no cumple sus restricciones) --------------------
# Con este ejemplo, se prueba la función Valida_y
yit = matrix(c(1,1,1,1,0,1,0,1,0),nrow = i_prof,ncol = t_dias,byrow = TRUE)
Vit = matrix(c(1,0,1,0,0,1,1,1,1),nrow = i_prof,ncol = t_dias,byrow = TRUE)
Valida_y(i_prof,t_dias,yit,Vit)
# Ej. 5 (No se cumple ninguna restricción) --------------------------------
# Con este ejemplo, se prueba la función Valida_x
#A: La materia  X  es impartida en más de una ocasión y la materia  Y  no es impartida
#B: El profesor  B , el día  Mierc  imparte más de un curso en el horario  2
#C: El profesor  B  no puede impartir el curso  X
#D: La materia  X  no puede impartirse en el salón  k
#E:Se imparte más de una materia el día Mierc, en el salón k, en el horario 2
xijtkh = numeric(comb)
xijtkh[115] = 1
xijtkh[116] = 1
Valida_x(Profes,Materias,Dias,Salones,Horarios,i_prof,j_materias,t_dias,k_salones,h_periodos,ArregloCombinaciones,xijtkh,yit,Vij,Vjk)
#' @param k_salones
#' @param t_dias
#' @param Vit
#' @param Vij
#' @param Vjk
#'
#' @return
#' @export
#'
#' @examples
Valida_V = function(i_prof,j_materias,k_salones,t_dias,Vit,Vij,Vjk)
{
#Inicializamos las variables
valid_v = 1 #Variable que nos indica si todas las matrices son binarias
valid1 = 1
valid2 = 1
valid3 = 1
for(opc in 1:3){
switch(opc,
'1' = {#Verificamos que la matriz Vit sea binaria
for(i in 1:i_prof){for(t in 1:t_dias){
if(Vit[i,t] != 1 && Vit[i,t] != 0){
valid1 = 0}}}},
'2' = {#Verificamos que la matriz Vij sea binaria
for(i in 1:i_prof){for(j in 1:j_materias){
if(Vij[i,j] != 1 && Vij[i,j] != 0){
valid2 = 0}}}},
'3' = {#Verificamos que la matriz Vjk sea binaria
for(j in 1:j_materias){for(k in 1:k_salones){
if(Vjk[j,k] != 1 && Vjk[j,k] != 0){
valid3 = 0}}}})}
if(valid1 == 0){
cat("\nLa matriz Vit no es binaria\n")
valid_v = 0}
if(valid2 == 0){
cat("\nLa matriz Vij no es binaria\n")
valid_v = 0}
if(valid3 == 0){
cat("\nLa matriz Vjk no es binaria\n")
valid_v = 0}
return(valid_v)}
ArregloCombinaciones
ArregloCombinaciones[1]
ArregloCombinaciones[1-5]
ArregloCombinaciones[1:5]
ArregloCombinaciones[15:20]
ArregloCombinaciones[1,1,1,1,1]
ArregloCombinaciones[1,1,1,1,]
ArregloCombinaciones[,1,1,1,1]
ArregloCombinaciones[1,1,1,1,1]
ArregloCombinaciones[1,2,2,2,3]
ArregloCombinaciones[172]
ArregloCombinaciones[1,1,,1,1]
matrix(c(1,1,0,1,5,0)
matrix(c(1,1,0,1,5,0),nrow = j_materias,ncol = i_prof,byrow = TRUE)
matrix(c(1,1,0,1,5,0),nrow = j_materias,ncol = i_prof,byrow = TRUE)
matrix(c(1,1,0,1,5,0),nrow = 3,ncol = 2,byrow = TRUE)
matrix(c(1,1,0,1,5,0),nrow = 2,ncol = 3,byrow = TRUE)
matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
matrix(c(1,0,0,0,0,1),nrow = 3,ncol = 2,byrow = TRUE)
param
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
#source("Fn_Horario.R")
source("Fn_Horario")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# valida_x ----------------------------------------------------------------
#Esta función arroja un 1 si la variable x cumple todas sus
#restricciones y 0 e.o.c.
#' Title: valida_x
#' @param Materias: Vector con entradas tipo "char" con los nombres de las materias que se pueden impartir
#' @example Materias = c("X","Y","Z")
#' @param Profes: Vector con entradas tipo "char" con los nombres de los profesores que pueden impartir alguna materia
#' @example Profes = c("A","B","C")
#' @param Dias: Vector con entradas tipo "char" con los nombres de los días en los que se puede impartir alguna materia
#' @example Dias = c("Lun","Mar","Mier","Jue","Vie")
#' @param Horarios: Vector con entradas tipo "char" con los 3 posibles horarios en los que se puede impartir alguna materia
#' @example Horarios = c("1","2","3")
#' @param Salones: Vector con entradas tipo "char" con los nombres de los salones en los que se puede impartir alguna materia
#' @example Salones = c("i","j","k")
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param ArregloCombinaciones: Arreglo de "comb" entradas y 5 dimensiones
#' @param xjithk: Es un vector de tamaño "comb" cuya entrada "n" vale 1 si el profesor i da la materia j, en el día t, en el salón k, en el horario h, y vale 0 e.o.c.
#' @example xjithk = c(0,1,0,1,0)
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vji: Matriz binaria con "i_prof" renglones y "j_materias" columnas
#' @example Vji = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vjk: Matriz binaria con "j_materias" renglones y "k_salones" columnas
#' @example Vjk = matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
#'
#' @return valid_x: Variable binaria que vale 1 si la variable x cumple todas sus restricciones, cero si no
valida_x = function(cromosoma,param){
valid_x = 1 #Nos indica si se cumplen o no las restricciones
# Restricción A ---------------------------------------------
# Se asegura que todas las materias sean dadas.
#Inicializamos las variables
valid_xA = 1 #Nos indica si se cumple o no la restricción A
suma1 = numeric(j_materias)
for(j in 1:j_materias){
for (i in 1:i_prof){
for(t in 1:t_dias){
for(k in 1:k_salones){
for(h in 1:h_periodos){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
suma1[j] = suma1[j] + 1}}}}}
if(suma1[j] == 0){
cat("\nNo se cumple la restricción 'A'.\nLa materia ",j," no es impartida")
valid_xA = 0
}else if(suma1[j] > 1){
cat("\nNo se cumple la restricción 'A'.\nLa materia ",j," es impartida en más de una ocasión")
valid_xA = 0}}
# Restricción B ---------------------------------------------
# Se indican los días que un profesor imparte una materia y se
#asegura que cada profesor no tenga más de un curso por periodo
#de tiempo.
suma2 = numeric(i_prof*t_dias*h_periodos)
a2 = 1 #Lo utilizamos como contador para los índices del vector "suma2"
valid_xB = 1  #Nos indica si se cumplen o no la restricción B
for (i in 1:i_prof){
for(t in 1:t_dias){
for(h in 1:h_periodos){
for(j in 1:j_materias){
for(k in 1:k_salones){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
suma2[a2] = suma2[a2] + 1}}}
if(suma2[a2] > yit[i,t]){
cat("\nNo se cumple la restricción 'B'.\nEl profesor ",i,", el día ", t, " imparte más de un curso en el horario ", h)
valid_xB = 0}
a2 = a2 + 1}}}
# Restricción C ---------------------------------------------
# Aseguramos que los profesores tengan asignadas materias que
#puedan impartir.
suma3 = numeric(i_prof*j_materias)
a3 = 1 #Lo utilizamos como contador para los índices del vector "suma2"
valid_xC = 1  #Nos indica si se cumplen o no la restricción C
for (i in 1:i_prof){
for(j in 1:j_materias){
for(t in 1:t_dias){
for(k in 1:k_salones){
for(h in 1:h_periodos){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
suma3[a3] = suma3[a3] + 1}}}}
if(suma3[a3] > Vji[j,i]){
cat("\nNo se cumple la restricción 'C'.\nEl profesor ",i, " no puede impartir el curso ",j)
valid_xC = 0}
a3 = a3 + 1}}
# Restricción D ---------------------------------------------
# Especifican que cada materia es asignada a un salón donde
#pueda impartirse esa clase.
suma4 = numeric(j_materias*k_salones)
a4 = 1 #Lo utilizamos como contador para los índices del vector "suma2"
valid_xD = 1  #Nos indica si se cumplen o no la restricción D
for(j in 1:j_materias){
for(k in 1:k_salones){
for (i in 1:i_prof){
for(t in 1:t_dias){
for(h in 1:h_periodos){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
suma4[a4] = suma4[a4] + 1}}}}
if(suma4[a4] > Vjk[j,k]){
cat("\nNo se cumple la restricción 'D'.\nLa materia ",j, " no puede impartirse en el salón ",k)
valid_xD = 0}
a4 = a4 + 1}}
# Restricción E ---------------------------------------------
# Nos indican que se puede impartir máximo una materia en cada
#salón por periodo de tiempo.
suma5 = numeric(t_dias*k_salones*h_periodos)
a5 = 1 #Lo utilizamos como contador para los índices del vector "suma2"
valid_xE = 1  #Nos indica si se cumplen o no la restricción E
for(t in 1:t_dias){
for(k in 1:k_salones){
for(h in 1:h_periodos){
for (i in 1:i_prof){
for(j in 1:j_materias){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
suma5[a5] = suma5[a5] + 1}}}
if(suma5[a5] > 1){
cat("\nNo se cumple la restricción 'E'.\nSe imparte más de una materia el día ", t, " en el salón ", k, " en el horario ",h)
valid_xE = 0}
a5 = a5 + 1}}}
#Si alguna restricción no se cumple entonces la función arroja un cero
if(valid_xA == 0 || valid_xB == 0 || valid_xC == 0 || valid_xD == 0 || valid_xE == 0){
valid_x = 0}
cat("\n")
return(valid_x)
}
# valida_y ----------------------------------------------------------------
#Esta función arroja un 1 si la variable y cumple todas sus
#restricciones y 0 e.o.c.
#' Title: valida_y
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @example i_prof, t_dias \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vit: Matriz binaria con "i_prof" renglones y "t_dias" columnas
#' @example Vit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return valid_y: Variable binaria que vale 1 si la variable y cumple todas sus restricciones, cero si no
valida_y = function(param){
# Restricción F ---------------------------------------------
# Nos aseguramos que los profesores den clase los días que pueden.
valid_y = 1
for (i in 1:i_prof){
for(t in 1:t_dias)
if(yit[i,t] > Vit[i,t]){
cat("\n y_",i,"_",t," = ",yit[i,t], " > ", Vit[i,t], " = V_",i,"_",t)
valid_y = 0}}
cat("\n")
return(valid_y)
}
# valida_V ----------------------------------------------------------------
#Esta función arroja un 1 si las matrices V son binarias y 0 e.o.c.
#No es necesario validar las dimensiones de las matrices (U y V) porque
#al momento de definirlas (ya sea a mano o a través del usuario) éstas
#se inicializan con los datos de las dimensiones deseadas, por lo que
#siempre tendrán las dimensiones que queremos.
#' Title valida_V
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, k_salones \in {1,2,3,...}
#' @param Vit: Matriz binaria con "i_prof" renglones y "t_dias" columnas
#' @example Vit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vji: Matriz binaria con "i_prof" renglones y "j_materias" columnas
#' @example Vji = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vjk: Matriz binaria con "j_materias" renglones y "k_salones" columnas
#' @example Vjk = matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
#'
#' @return valid_v: Variable binaria que vale 1 si las matrices Vit, Vji, Vjk, son binarias, cero si no
valida_V = function(param){
#Inicializamos las variables
valid_v = 1 #Variable que nos indica si todas las matrices son binarias
valid1 = 1
valid2 = 1
valid3 = 1
for(opc in 1:3){
switch(opc,
'1' = {#Verificamos que la matriz Vit sea binaria
for(i in 1:i_prof)for(t in 1:t_dias){
if(Vit[i,t] != 1 && Vit[i,t] != 0){
valid1 = 0}}},
'2' = {#Verificamos que la matriz Vji sea binaria
for(i in 1:i_prof)for(j in 1:j_materias){
if(Vji[j,i] != 1 && Vji[j,i] != 0){
valid2 = 0}}},
'3' = {#Verificamos que la matriz Vjk sea binaria
for(j in 1:j_materias)for(k in 1:k_salones){
if(Vjk[j,k] != 1 && Vjk[j,k] != 0){
valid3 = 0}}})}
if(valid1 == 0){
cat("\nLa matriz Vit no es binaria\n")
valid_v = 0}
if(valid2 == 0){
cat("\nLa matriz Vji no es binaria\n")
valid_v = 0}
if(valid3 == 0){
cat("\nLa matriz Vjk no es binaria\n")
valid_v = 0}
return(valid_v)
}
# Función genera_cromosoma ---------------------------------------------------------
#Esta función sólo recibe el número de materias, profesores, días,
#periodos y salones que se tienen y genera de manera aleatoria los
#cromosomas los cuales tienen forma de matriz con j_materias" renglones
#y 4 columnas, las cuales representan:
# 1: Profesor que imparte la materia j
# 2: Día en el que se imparte la materia j
# 3: Horario en el que se imparte la materia j
# 4: Salón en el que se imparte la materia j
#' Title: genera_cromosoma
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#'
#' @return cromosoma: Matriz de "j_materias" renglones y 4 columnas
genera_cromosoma = function(param){
#Inicializamos las variables
cromosoma = matrix(0,nrow = j_materias,ncol = 4,byrow = TRUE)
columnas = c(i_prof,t_dias,h_periodos,k_salones)
for (j in 1:j_materias)for (columna in 1:4){
cromosoma[j,columna] = sample(1:columnas[columna],1)
}
return(cromosoma)
}
# Función valida_cromosoma -------------------------------------------------
#Esta función manda llamar las funciones encargadas de validar las rstricciones
#que deben cumplir los cromosomas
#' Title: valida_cromosoma
#' @param cromosoma: Matriz de "j_materias" y 4 columnas (profesor, día, horario, salón); el renglón "j" indica que la materia "j" es impartida por el profesor "i", el día "t", en el horario "h", en el salón "k"
#' @example cromosoma = matrix(c(1,9,10,11,12,1,3,5),nrow = 2,ncol = 4,byrow = TRUE)
#' @param Vit: Matriz binaria con "i_prof" renglones y "t_dias" columnas
#' @example Vit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vji: Matriz binaria con "j_materias" renglones y "i_prof" columnas
#' @example Vji = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Vjk: Matriz binaria con "j_materias" renglones y "k_salones" columnas
#' @example Vjk = matrix(c(1,0,0,0,0,1),nrow = 2,ncol = 3,byrow = TRUE)
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return Valid_crom = 1 si el cromosoma cumple todas las restricciones, 0 si no
valida_cromosoma = function(cromosoma,param){
Valid_crom = 1
Val_V = Valida_V(param)
Val_y = Valida_y(param)
Val_x = Valida_x(cromosoma,param)
#Si alguna restricción no se cumple entonces la función arroja un cero
if(Val_V == 0 || Val_y == 0 || Val_x == 0){
Valid_crom = 0}
return(Valid_crom)
}
# Función utilidad_cromosoma -----------------------------------------------
#En esta función se calcula la utilidad de cada cromosoma.
#' Title: utilidad_cromosoma
#' @param cromosoma: Matriz de "j_materias" y 4 columnas (profesor, día, horario, salón); el renglón "j" indica que la materia "j" es impartida por el profesor "i", el día "t", en el horario "h", en el salón "k"
#' @example cromosoma = matrix(c(1,9,10,11,12,1,3,5),nrow = 2,ncol = 4,byrow = TRUE)
#' @param Uit: Matriz con "i_prof" renglones y "t_dias" columnas, cuya entrada (i,t) representa la utilidad que tiene el profesor "i" de impartir en el día "t"
#' @example Uit = matrix(c(1,2,3,4),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Uji: con "j_materias" renglones y con "i_prof" columnas, cuya entrada (j,i) representa la utilidad que tiene el profesor "i" de impartir la materia "j"
#' @example Uji = matrix(c(5,6,7,8),nrow = 2,ncol = 2,byrow = TRUE)
#' @param Ujt: Matriz con "j_materias" renglones y "k_salones" columnas, cuya entrada (j,k) representa la utilidad que tiene la materia "j" por ser impartida en el salón "k"
#' @example Ujt = matrix(c(1,9,10,11,12,1),nrow = 2,ncol = 3,byrow = TRUE)
#' @param j_materias: Número de materias que se van a impartir.
#' @param i_prof: Número de profesores que van impartir alguna materia.
#' @param t_dias: Número de días en los que se darán clases.
#' @param h_periodos: Número de periodos que hay en un día para impartir alguna materia.
#' @param k_salones: Número de salones que se pueden ocupar.
#' @example j_materias, i_prof, t_dias, h_periodos, k_salones \in {1,2,3,...}
#' @param yit: Es una matriz con "i_prof" renglones y "t_dias" columnas, la entrada "i,t" vale 1 si el profesor i va a dar clases el día t y vale 0 e.o.c.
#' @example yit = matrix(c(1,0,0,1),nrow = 2,ncol = 2,byrow = TRUE)
#'
#' @return El valor de la función objetivo del cromosoma que se le pasó como parámetro
utilidad_cromosoma = function(cromosoma,param){
utilidad = 0
for(j in 1:j_materias){
for (i in 1:i_prof){
for(t in 1:t_dias){
for(h in 1:h_periodos){
for(k in 1:k_salones){
if((cromosoma[j,1] == i) && (cromosoma[j,2] == t) && (cromosoma[j,3] == h) && (cromosoma[j,4] == k)){
utilidad = utilidad + (Uji[j,i]*Ujt[j,t])}}}}}}
for (i in 1:i_prof){
for(t in 1:t_dias){
if(yit[i,t] == 1){
utilidad = utilidad + Uit[i,t]}}}
return(utilidad)
}
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
# Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que se
#encuentran en el archivo Fn_Horario.
source("Fn_Horario.R")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V07/.RData")
load("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Programas/Prog V09/Matrices m_grande_total/m_grande_total_20081_20201.RData")
View(m_grande_total)
View(m_grande_total)
mat_porcentajes <- mat_demanda_aux/mat_demanda_alumnos
colMain <- colorRampPalette(brewer.pal(8, "Blues"))(25)
#' 1-3) Extracción de datos y simulación de alumnos de t+1
# set.seed(8654)
set.seed(1806)
mat_demanda_alumnos <- gen_mat_demanda_alumnos(param,param_sim)#44.84 seg
#Source ------------------------------------------------------------------
#Se utiliza el comando source() para poder cargar todas las funciones que
#se encuentran en el archivo Fn_Asignación.
rm(list=ls())  # Borra variables
cat("\014") # Borra consola
#Se establece el directorio en el que se va a trabajar
setwd("C:/Users/miri_/Dropbox/Carpeta compartida MIri/Faculty_schedule_simulation/Hidden_files/Tesis/Programas/ProgFinal")
source("Fn_Asignacion.R")
#' 1-3) Extracción de datos y simulación de alumnos de t+1
# set.seed(8654)
set.seed(1806)
mat_demanda_alumnos <- gen_mat_demanda_alumnos(param,param_sim)#44.84 seg
#' 4a) Simulación de solicitudes de profesores de t+1 (oculta)
# set.seed(8654)
set.seed(1806)
mat_solicitudes <- gen_solicitudes(param)#8.14 seg
#' 5) Simulación de esqueletos
# set.seed(8654)
set.seed(1806)
# set.seed(9293)#5.76seg
# set.seed(0802)#5.66seg
# set.seed(236776)#4.82seg
# set.seed(132934)#4.9seg
# set.seed(0.1806)#5.39seg
lista_info_esqueleto <- gen_esqueleto(mat_demanda_alumnos,mat_solicitudes,
param)#16.73/10.27/13.34/9.25/8.65seg
#Se definen las variables que se van a utilizar
vec_nom_materias_total <- param$vec_nom_materias_total
mat_esqueleto <- lista_info_esqueleto[[1]]
mat_prof_TC <- lista_info_esqueleto[[2]]
# mat_prof_asig <- lista_info_esqueleto[[3]]
mat_demanda_aux <- lista_info_esqueleto[[4]]
mat_solicitudes_TC <- lista_info_esqueleto[[5]]
mat_solicitudes_asignatura <- lista_info_esqueleto[[6]]
(num_alum_simulados <- lista_info_esqueleto[[7]])#34750
calif_esqueleto <- 0
# Tabla -------------------------------------------------------------------
tabla_info <- data.frame(Materia = vec_nom_materias_total,Num_Al_Sobra = 0,
Num_Al_Falta = 0,Num_Exactas = 0,
demanda_x_materia = 0)#,sim1_menos_simfinal = 0)
## El número de alumnos sobrantes se representa con números negativos.
for(d in 1:dim(tabla_info)[1]){
#Recorre renglones de la tabla, columnas de la matriz
tabla_info[d,2] <- sum(mat_demanda_aux[mat_demanda_aux[,d]<0,d])
tabla_info[d,3] <- sum(mat_demanda_aux[mat_demanda_aux[,d]>0,d])
ceros_antes <- length(mat_demanda_alumnos[mat_demanda_alumnos[,d]==0,d])
ceros_despues <- length(mat_demanda_aux[mat_demanda_aux[,d]==0,d])
tabla_info[d,4] <- ceros_despues - ceros_antes
tabla_info[d,5] <- sum(mat_demanda_alumnos[,d])
# tabla_info[d,6] <- sum(mat_demanda_alumnos[,d]) - sum(mat_demanda_aux[,d])
}
View(tabla_info)
vec_alum_sobrantes <- tabla_info[,2]
vec_alum_faltantes <- tabla_info[,3]
vec_alum_exactos <- tabla_info[,4]
vec_sobrantes <- as.numeric(sort(vec_alum_sobrantes))
vec_faltantes <- as.numeric(sort(vec_alum_faltantes))
vec_exactos <- as.numeric(sort(vec_alum_exactos))
sobran_razon <- rep(0,length(vec_nom_materias_total))
faltan_razon <- rep(0,length(vec_nom_materias_total))
for(d in 1:length(vec_nom_materias_total)){
if(tabla_info[d,5] == 0){
sobran_razon[d] <- Inf
faltan_razon[d] <- Inf
}else{
sobran_razon[d] <- vec_alum_sobrantes[d]/tabla_info[d,5]
faltan_razon[d] <- vec_alum_faltantes[d]/tabla_info[d,5]
}
}
mat_sobran_faltan_razon <- data.frame(Materias = vec_nom_materias_total,
Sobran_Razon = sobran_razon,
Faltan_Razon = faltan_razon,
demanda_x_materia = tabla_info[,5])
View(mat_sobran_faltan_razon)
plot(as.numeric(sort(mat_sobran_faltan_razon[,2])),
main="Número de alumnos sobrantes entre demanda",
xlab = "Materias",ylab = "Alumnos sobrantes")#Sobrantes
plot(as.numeric(sort(mat_sobran_faltan_razon[,3])),
main="Número de alumnos faltantes entre demanda",
xlab = "Materias",ylab = "Alumnos faltantes")#Faltantes
mat_porcentajes <- mat_demanda_aux/mat_demanda_alumnos
colMain <- colorRampPalette(brewer.pal(8, "Blues"))(25)
heatmap(mat_porcentajes, Colv = NA, Rowv = NA, scale="none",col=colMain,
main = "Porcentajes alumnos sobrantes y faltantes")
View(mat_porcentajes)
